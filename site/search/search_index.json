{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Docs","text":"<p>This is the personal documentation site of Rajat Bhati.</p>"},{"location":"#about-me","title":"About Me","text":"<ul> <li>GitHub: https://github.com/Rajatt09</li> <li>LinkedIn: https://www.linkedin.com/in/rajatbhati</li> <li>Email: rajatbhati9559@gmail.com</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>This site contains documentation for various tools and technologies that I use. It includes snippets and information that I refer to occasionally.</p>"},{"location":"computer-network/http-connections/","title":"Comparison of HTTP Connection Types","text":"<p>Here's a comparison of Persistent HTTP with Pipelining, Non-Persistent HTTP, and Non-Persistent HTTP with Parallel Connections, using a simple example of retrieving a webpage with an HTML file and 5 image objects.</p>"},{"location":"computer-network/http-connections/#assumptions","title":"Assumptions","text":"<ul> <li>RTT (Round Trip Time): 100ms</li> <li>Transmission time for each object (HTML or image): 200ms</li> </ul>"},{"location":"computer-network/http-connections/#1-non-persistent-http-without-parallel-connections","title":"1. Non-Persistent HTTP (Without Parallel Connections)","text":"<p>In Non-Persistent HTTP, each object requires a separate TCP connection. For each object (HTML + 5 images), there will be 2 RTTs: one to establish the connection and one to send the request and receive the response.</p>"},{"location":"computer-network/http-connections/#steps-for-non-persistent-http-without-parallel-connections","title":"Steps for Non-Persistent HTTP (Without Parallel Connections)","text":"<p>Request for HTML:</p> <ul> <li>1 RTT to establish the TCP connection.</li> <li>1 RTT to request and receive the HTML.</li> <li>Total time for HTML: 2 RTT + Transmission time for HTML.</li> </ul> <p>Request for each image (5 images):</p> <ul> <li>For each image, 2 RTTs are required (1 for connection and 1 for request/response).</li> <li>Total time for 5 images: 5 \u00d7 (2 RTT + Transmission time per image).</li> </ul> <p>Total Time (Non-Persistent HTTP without Parallel Connections):</p> <ul> <li>HTML: 2 RTT + 200ms (transmission) = 200ms + 200ms = 400ms.</li> <li>5 images: 5 \u00d7 (2 RTT + 200ms) = 5 \u00d7 (200ms + 200ms) = 2000ms.</li> <li>Total time: 400ms + 2000ms = 2400ms.</li> </ul>"},{"location":"computer-network/http-connections/#2-persistent-http-without-pipelining","title":"2. Persistent HTTP (Without Pipelining)","text":"<p>In Persistent HTTP, one TCP connection is kept open for multiple requests. However, without pipelining, the client still needs to wait for the response of each object before sending the next request.</p>"},{"location":"computer-network/http-connections/#steps-for-persistent-http-without-pipelining","title":"Steps for Persistent HTTP (Without Pipelining)","text":"<p>Initial Request for HTML:</p> <ul> <li>1 RTT to establish the connection.</li> <li>1 RTT to send the request and receive the response.</li> <li>Total time for HTML: 2 RTT + Transmission time for HTML.</li> </ul> <p>Subsequent Requests for each image (5 images):</p> <ul> <li>Each image is sent after the HTML response is received.</li> <li>For each image, 1 RTT is required for the request and response (no additional connection setup).</li> <li>Total time for 5 images: 5 \u00d7 (1 RTT + Transmission time per image).</li> </ul> <p>Total Time (Persistent HTTP without Pipelining):</p> <ul> <li>HTML: 2 RTT + 200ms = 200ms + 200ms = 400ms.</li> <li>5 images: 5 \u00d7 (1 RTT + 200ms) = 5 \u00d7 (100ms + 200ms) = 1500ms.</li> <li>Total time: 400ms + 1500ms = 1900ms.</li> </ul>"},{"location":"computer-network/http-connections/#3-persistent-http-with-pipelining","title":"3. Persistent HTTP with Pipelining","text":"<p>In Persistent HTTP with Pipelining, the client can send all requests in one go without waiting for each response. This reduces RTT since requests are sent in parallel.</p>"},{"location":"computer-network/http-connections/#steps-for-persistent-http-with-pipelining","title":"Steps for Persistent HTTP with Pipelining","text":"<p>First get HTML:</p> <ul> <li>1 RTT for TCP connection (100ms)</li> <li>1 RTT for HTTP request/response (100ms)</li> <li>Transmission time for HTML (200ms)</li> </ul> <p>Total for HTML = 400ms</p> <p>Then pipeline requests for all 5 images:</p> <ul> <li>1 RTT for sending all image requests and starting to receive responses (100ms)</li> <li>Transmission time for 5 images (5 \u00d7 200ms = 1000ms)</li> </ul> <p>Total for pipelined images = 1100ms</p> <p>Total time = 400ms + 1100ms = 1500ms</p>"},{"location":"computer-network/http-connections/#4-non-persistent-http-with-parallel-connections","title":"4. Non-Persistent HTTP with Parallel Connections","text":"<p>In Non-Persistent HTTP with Parallel Connections, the client opens multiple TCP connections to fetch multiple objects simultaneously. In this case, the transmission time is reduced because objects are retrieved concurrently.</p>"},{"location":"computer-network/http-connections/#steps-for-non-persistent-http-with-parallel-connections","title":"Steps for Non-Persistent HTTP with Parallel Connections","text":"<p>Request for HTML and all 5 images:</p> <p>First, the HTML request:</p> <p>First, you must get the HTML file (sequential/independent):</p> <ul> <li>1 RTT for TCP (100ms)</li> <li>1 RTT for HTTP request/response (100ms)</li> <li>Transmission time (200ms)</li> </ul> <p>Total for HTML = 400ms</p> <p>After getting HTML, browser discovers the 5 images and can request them all in parallel:</p> <ul> <li>All TCP connections happen over the same 1 RTT (100ms)</li> <li>All HTTP requests/responses happen over the same 1 RTT (100ms)</li> <li>All transmissions happen in parallel over the same 200ms period</li> </ul> <p>Total for parallel phase = 400ms</p> <p>Total Time (Non-Persistent HTTP with Parallel Connections): 800ms.</p>"},{"location":"computer-network/http-connections/#summary-of-times","title":"Summary of Times","text":"Type of HTTP Total Time Non-Persistent HTTP (without Parallel) 2400ms Persistent HTTP (without Pipelining) 1900ms Persistent HTTP with Pipelining 1500ms Non-Persistent HTTP (with Parallel Connections) 800ms"},{"location":"computer-network/http-connections/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Non-Persistent HTTP (without parallel connections) has the highest total time because it opens a new connection for each object.</li> <li>Persistent HTTP without pipelining is faster than non-persistent, but it still waits for each object\u2019s response before sending the next request.</li> <li>Persistent HTTP with pipelining greatly reduces the time by allowing multiple requests in one go, sending them without waiting for responses in between.</li> <li>Non-Persistent HTTP with parallel connections performs better than non-persistent without parallel connections because it fetches multiple objects simultaneously.</li> </ul>"},{"location":"computer-network/http-connections/#attacks","title":"Attacks","text":"<ul> <li> <p>DoS: Single source attack that aims to overload a server and disrupt its service.</p> </li> <li> <p>DDoS: A more powerful, distributed version of DoS that involves multiple devices attacking a server, making it much harder to mitigate.</p> </li> </ul> <p>CDNs have multiple servers across the globe, so when a DDoS attack occurs, the traffic gets distributed among all those servers instead of overwhelming a single server.</p>"},{"location":"computer-network/http-connections/#what-is-cdn","title":"What is CDN ?","text":"<p>Content Delivery Network (CDN) is a network of servers that are distributed across different geographical locations. The main goal of a CDN is to deliver content to users more efficiently and quickly by reducing the distance between the user and the server hosting the content.</p>"},{"location":"computer-network/protocol-layering/","title":"Protocol Layers in Networking: Organizing Complexity","text":"<p>Networks are complex due to multiple components like hosts, routers, links, applications, protocols, and hardware. To manage this complexity, we use a layered approach to structure network communications.</p>"},{"location":"computer-network/protocol-layering/#why-do-we-use-layers","title":"Why Do We Use Layers?","text":"<ol> <li>Simplifies Network Design: Breaking the network into layers allows each layer to handle a specific function without worrying about the entire system.</li> <li>Standardization: Different devices and systems from different vendors can work together because they follow common standards (e.g., TCP/IP model).</li> <li>Troubleshooting &amp; Development: If something breaks, we can fix a specific layer instead of the entire network.</li> </ol>"},{"location":"computer-network/protocol-layering/#the-layered-approach-osi-tcpip-models","title":"The Layered Approach: OSI &amp; TCP/IP Models","text":"<p>There are two main models for structuring network communications:</p> <ol> <li>OSI (Open Source Interconnection) Model (7 Layers): Theoretical model used for understanding networking.</li> <li>TCP/IP Model (4 Layers): Practical model used on the internet today.</li> </ol> OSI Model (7 Layers) TCP/IP Model (4 Layers) Function 7. Application 4. Application User interaction (Web, Email, FTP) 6. Presentation (Merged with Application) Data formatting (encryption, compression) 5. Session (Merged with Application) Connection management 4. Transport 3. Transport End-to-end communication (TCP, UDP) 3. Network 2. Internet Routing &amp; addressing (IP, ICMP) 2. Data Link 1. Network Access MAC addressing &amp; error detection (Ethernet, Wi-Fi) 1. Physical 1. Network Access Transmission of raw bits (Cables, Wi-Fi signals) <p>-- Seven layers</p> <ul> <li>Lower three layers are peer-to-peer</li> <li>Next four layers are end-to-end</li> </ul> <ul> <li> <p>ARP: A protocol that maps IP addresses to MAC addresses within a local network to facilitate data link layer communication.</p> </li> <li> <p>RARP: A protocol used to map MAC addresses to IP addresses, allowing devices that don't know their IP address to obtain it. It has been largely replaced by DHCP.</p> </li> </ul> <p>-- When a packet is too large to be transmitted over a network link due to MTU restrictions (e.g., Ethernet has an MTU of 1500 bytes), the Network Layer (specifically the IP layer) fragments the packet into smaller parts. -- Each fragment is sent separately over the network and contains information such as:</p> <ul> <li>Identification: A unique identifier for the original packet, so fragments can be correctly reassembled at the destination.</li> <li>Fragment Offset: Tells the receiving system where this fragment fits into the original packet.</li> <li>More Fragment (MF) flag: Indicates whether there are more fragments of the same packet.</li> </ul> <p>Application -&gt; Transport -&gt; Network -&gt; Link</p> <p>message -&gt; segment -&gt; datagram -&gt; frame</p> <p>M ----&gt; H | M ----&gt; H | H | M ----&gt; H | H | H | M</p> <p>where H is header and M is actual message : each layer adds its header to the packet</p> <p>-- Illustrative Example: Imagine you want to send an email from your computer (Device A) to another computer (Device B) over the internet.</p> <ul> <li>Application Layer: You compose the email, and the email is broken into smaller pieces (segments) by the Transport Layer.</li> <li>Network Layer (IP): The Transport Layer hands the email segments to the Network Layer, which adds the IP header with the source (your IP) and destination (Device B's IP) addresses. This becomes a packet.</li> <li>Data Link Layer (Ethernet): The packet is handed down to the Data Link Layer, which wraps it in a frame with MAC addresses (source MAC of your device and destination MAC of the router or Device B if it's in the same network).</li> <li>Physical Layer: The frame is converted into electrical signals (or optical signals, depending on the medium) and sent over the physical medium (e.g., Ethernet cables or Wi-Fi).</li> <li>Routers: If Device B is on a different network, the packet passes through several routers. Each router strips off the Data Link Layer information (MAC address), inspects the IP address, and forwards it to the next router or the destination.</li> <li>Destination Device (Device B): When the packet reaches Device B\u2019s network, the process is reversed, and Device B\u2019s application reconstructs the email.</li> </ul>"},{"location":"computer-network/protocol-layering/#comparison-with-other-devices","title":"Comparison with Other Devices","text":"Device Works at Layer Function Hub Layer 1 (Physical) Broadcasts data to all devices in a network Switch Layer 2 (Data Link) Uses MAC addresses to forward data within a network Router Layer 3 (Network) Uses IP addresses to connect different networks and forward data Modem Layer 1 (Physical) &amp; Layer 2 (Data Link) Converts digital\u2194analog signals, handles error detection Tap Layer 1 (Physical) Splits coaxial cable signals to multiple users"},{"location":"computer-network/protocol-layering/#how-data-moves-through-layers","title":"How Data Moves Through Layers","text":"<p>When you send a message over a network (e.g., sending an email), the data moves down through each layer, gaining extra information (headers), then is sent over the network. The receiver\u2019s network processes it in reverse (bottom to top).</p> <ol> <li>Application Layer: You write an email.</li> <li>Transport Layer (TCP): Email is broken into packets.</li> <li>Network Layer (IP): Packets are assigned IP addresses.</li> <li>Data Link Layer (Ethernet/Wi-Fi): Packets are sent as frames.</li> <li>Physical Layer (Fiber, Copper, Wireless): Data is converted to signals.</li> <li>Receiver: Data reaches the receiver and is rebuilt layer by layer.</li> </ol> <p>Note: Sockets are used evertime either TCP or UDP sockets are used for connection internammly i.e. TCP sockets or UDP sockets.</p> <ul> <li>An IP address alone is not sufficient to identify a specific process on a host.</li> <li>In combination, the IP address and the port number form a unique identifier for a process on a specific host, often called a socket (IP address + port).</li> </ul>"},{"location":"computer-network/protocol-layering/#rtp-vs-udp","title":"RTP Vs UDP","text":""},{"location":"computer-network/protocol-layering/#udp-user-datagram-protocol","title":"UDP (User Datagram Protocol):","text":"<p>Type: Transport protocol.</p> <p>Purpose: Provides basic, connectionless, and fast data transmission.</p> <p>Features:</p> <ul> <li>No packet ordering or synchronization.</li> <li>No error recovery or congestion control.</li> </ul> <p>Use: Suitable for applications where speed is crucial and occasional data loss is acceptable (e.g., web browsing, DNS).</p>"},{"location":"computer-network/protocol-layering/#rtp-real-time-transport-protocol","title":"RTP (Real-time Transport Protocol):","text":"<p>Type: Application-layer protocol built on top of UDP.</p> <p>Purpose: Specifically designed for real-time audio, video, and multimedia streaming.</p> <p>Features:</p> <ul> <li>Adds packet sequencing and timestamping.</li> <li>Provides synchronization of media streams.</li> <li>Works with other protocols (like RTCP) for error monitoring and feedback.</li> </ul> <p>Use: Ideal for live streaming, video calls, VoIP, where timing and ordering of packets are essential.</p>"},{"location":"computer-network/dns/dns-records/","title":"DNS Protocol","text":"<p>DNS (Domain Name System) operates using a specific protocol to query and reply about domain name resolutions. The protocol is based on messages that consist of both queries and responses. The message format is the same for both types, but they differ in content.</p>"},{"location":"computer-network/dns/dns-records/#dns-message-structure","title":"DNS Message Structure","text":"<p>Each DNS message consists of several sections:</p>"},{"location":"computer-network/dns/dns-records/#header","title":"Header","text":"<p>This contains information that is common to both query and response messages.</p> <ul> <li>Identification (16 bits): This is a unique number used to match queries with their responses. Both the query and reply will have the same identification number to ensure they are related.</li> <li>Flags: A series of flags that tell the server/client what the message represents or requests:</li> <li>1 bit: Query or Reply (indicates whether the message is a query or a response).</li> <li>1 bit: Recursion Desired (this indicates if the sender wants the resolver to perform recursive querying).</li> <li>1 bit: Recursion Available (this indicates if the server supports recursion).</li> <li>1 bit: Authoritative Answer (indicates whether the response is from an authoritative server or not).</li> </ul>"},{"location":"computer-network/dns/dns-records/#fields-in-dns-messages","title":"Fields in DNS Messages","text":""},{"location":"computer-network/dns/dns-records/#for-a-query","title":"For a query:","text":"<ul> <li>Name: The domain name you're asking about (e.g., www.example.com).</li> <li>Type: The type of DNS record you are asking for (e.g., A record for an IP address, MX record for mail exchange).</li> </ul>"},{"location":"computer-network/dns/dns-records/#for-a-response","title":"For a response:","text":"<ul> <li>RRs (Resource Records): The answer to the query, which will include resource records such as:</li> <li>Authoritative records: For authoritative DNS servers.</li> <li>Additional information: Which may help in further resolving the query, e.g., IP addresses of authoritative servers.</li> </ul>"},{"location":"computer-network/dns/dns-records/#inserting-records-into-dns-registering-a-domain","title":"Inserting Records into DNS (Registering a Domain)","text":"<p>Here's an example to understand how DNS records are inserted when you register a new domain.</p>"},{"location":"computer-network/dns/dns-records/#step-by-step-process","title":"Step-by-Step Process","text":"<p>Let\u2019s assume you start a new company called \"Network Utopia\" and you register the domain networkuptopia.com. Here\u2019s how it works:</p>"},{"location":"computer-network/dns/dns-records/#domain-registration","title":"Domain Registration","text":"<ol> <li>You register the domain networkuptopia.com with a DNS registrar, like Network Solutions.</li> <li>During this registration process, you will provide the names and IP addresses of your authoritative name servers (DNS servers).</li> </ol>"},{"location":"computer-network/dns/dns-records/#registrar-inserts-records","title":"Registrar Inserts Records","text":"<p>The registrar will then insert DNS records into the TLD (Top-Level Domain) server for .com (since .com is the TLD of your domain). These records typically include:</p> <ul> <li>NS (Name Server) Record: Specifies which DNS servers are authoritative for your domain. This is where DNS queries for networkuptopia.com will be sent.</li> <li>Example: (networkuptopia.com, dns1.networkuptopia.com, NS)<ul> <li>This means networkuptopia.com is associated with dns1.networkuptopia.com as its authoritative name server.</li> </ul> </li> <li>A (Address) Record: This specifies the IP address of the authoritative DNS server.</li> <li>Example: (dns1.networkuptopia.com, 212.212.212.1, A)<ul> <li>This means the authoritative DNS server for networkuptopia.com is located at IP address 212.212.212.1.</li> </ul> </li> </ul>"},{"location":"computer-network/dns/dns-records/#create-additional-records-for-subdomains","title":"Create Additional Records for Subdomains","text":"<p>Now, as a part of managing the domain, you can create additional DNS records for your website or services. For example:</p> <ul> <li>A record for www.networkuptopia.com: This will associate the www subdomain with the IP address of your web server.</li> <li> <p>MX (Mail Exchange) Record for networkuptopia.com: This will specify the mail server responsible for handling emails sent to networkuptopia.com.</p> </li> <li> <p>Example:</p> <ul> <li>A record: (www.networkuptopia.com, 212.212.212.2, A)</li> <li>This means that www.networkuptopia.com points to the IP address 212.212.212.2 (your web server).</li> <li>MX record: (networkuptopia.com, mail.networkuptopia.com, MX)</li> <li>This specifies that the mail server for networkuptopia.com is located at mail.networkuptopia.com.</li> </ul> </li> </ul>"},{"location":"computer-network/dns/dns/","title":"Domain Name System (DNS)","text":""},{"location":"computer-network/dns/dns/#what-is-dns","title":"What is DNS?","text":"<p>DNS is like the internet's phone book - it converts human-readable domain names (www.google.com) into IP addresses (142.250.190.78).</p>"},{"location":"computer-network/dns/dns/#dns-hierarchy","title":"DNS Hierarchy","text":"<pre><code>graph TD\n    A[Root DNS Servers] --&gt; B[Top Level Domain .com]\n    A --&gt; C[Country Code TLD .in]\n    B --&gt; D[Second Level i.e. Authoritative Servers google.com]\n    D --&gt; E[Subdomain]</code></pre> <ul> <li>www.google.com is a subdomain of google.com even if www is removed it will work fine , it was required previously to separate web traffic from other like mail etc.</li> </ul>"},{"location":"computer-network/dns/dns/#dns-resolution-process","title":"DNS Resolution Process","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant R as Resolver\n    participant Root as Root DNS\n    participant TLD as TLD Server\n    participant Auth as Auth Server\n\n    C-&gt;&gt;R: www.google.com?\n    R-&gt;&gt;Root: Ask for .com servers\n    Root-&gt;&gt;R: Here's .com servers\n    R-&gt;&gt;TLD: Ask for google.com\n    TLD-&gt;&gt;R: Here's google's servers\n    R-&gt;&gt;Auth: Ask for www.google.com\n    Auth-&gt;&gt;R: Here's the IP\n    R-&gt;&gt;C: IP is 142.250.190.78</code></pre> <p>-- Root Name Server Directs to TLD Server</p> <ul> <li>The Root Name Server doesn\u2019t know the exact IP but knows where to look.</li> <li>It tells the LNS to ask the Top-Level Domain (TLD) Server for .com.</li> </ul>"},{"location":"computer-network/dns/dns/#types-of-dns-servers","title":"Types of DNS Servers","text":"<p>1. DNS Resolver (Recursive) : Local Name Server (LNS)</p> <ul> <li> <p>The LNS (provided by your ISP or network) checks if it already knows the IP address.</p> </li> <li> <p>First point of contact</p> </li> <li>Handles client requests</li> <li>Caches results</li> <li>Example: ISP's DNS server</li> </ul> <p>2. Root Name Servers (.)</p> <ul> <li>Top of DNS hierarchy</li> <li>13 root server clusters</li> <li>Points to TLD servers</li> </ul> <p>3. TLD Servers (.com, .org, .net)</p> <ul> <li>Manages top-level domains</li> <li>Points to authoritative servers</li> <li>Example: Verisign for .com</li> </ul> <p>4. Authoritative Name Servers</p> <ul> <li>Final source of truth</li> <li>Holds actual DNS records</li> <li>Example: Google's DNS servers</li> </ul>"},{"location":"computer-network/dns/dns/#dns-records","title":"DNS Records","text":"<pre><code>graph LR\n    A[DNS Records] --&gt; B[A Record&lt;br&gt;IP Address]\n    A --&gt; C[CNAME&lt;br&gt;Alias]\n    A --&gt; D[MX&lt;br&gt;Mail Server]\n    A --&gt; E[TXT&lt;br&gt;Text Info]</code></pre> <ul> <li>Host Aliasing</li> </ul> <p>What it does: Allows a single domain name to point to multiple other names or addresses.</p> <p>Why it\u2019s needed: Helps manage multiple services under one name.</p> <p>Example: Canonical Name (CNAME): www.example.com</p> <p>Alias Names: shop.example.com, blog.example.com, etc.</p> <ul> <li>Mail Server Aliasing</li> </ul> <p>What it does: Redirects email traffic to the right mail servers.</p> <p>Why it\u2019s needed: Email servers often have different names from websites.</p> <p>DNS uses MX (Mail Exchange) records to find the correct mail server.</p>"},{"location":"computer-network/dns/dns/#example-visiting-wwwgooglecom","title":"Example: Visiting www.google.com","text":"<ol> <li>Check browser cache</li> <li>Check OS cache</li> <li>Check resolver cache</li> <li>Ask root servers</li> <li>Ask .com servers</li> <li>Ask Google's servers</li> <li>Get IP address</li> <li>Cache result</li> </ol>"},{"location":"computer-network/dns/web-hosting/","title":"Web Hosting &amp; DNS Records","text":""},{"location":"computer-network/dns/web-hosting/#dns-records-explained","title":"DNS Records Explained","text":"<ol> <li>A Record (Address)</li> </ol> <pre><code>flowchart LR\n    A[example.com] --&gt;|A Record| B[192.168.1.10]</code></pre> <ul> <li>Points domain to IP address</li> <li>Direct connection</li> <li>Fast resolution</li> <li> <p>Example: <code>example.com \u2192 192.168.1.10</code></p> </li> <li> <p>CNAME (Canonical Name)</p> </li> </ul> <pre><code>flowchart LR\n    A[www.example.com] --&gt;|CNAME| B[example.com]\n    B --&gt;|A Record| C[192.168.1.10]</code></pre> <ul> <li>Points domain to another domain</li> <li>Like an alias</li> <li>Flexible but slower</li> <li> <p>Example: <code>www.example.com \u2192 example.com</code></p> </li> <li> <p>MX Record (Mail Exchange)</p> </li> </ul> <pre><code>flowchart LR\n    A[example.com] --&gt;|MX Record| B[mail.example.com]\n    B --&gt;|Priority 10| C[mail1.example.com]\n    B --&gt;|Priority 20| D[mail2.example.com]</code></pre> <ul> <li>Email routing</li> <li>Multiple servers</li> <li>Priority based</li> <li> <p>Example: <code>example.com \u2192 mail1.example.com (10)</code></p> </li> <li> <p>TXT Record (Text)</p> </li> <li> <p>SPF records</p> </li> <li>DKIM verification</li> <li>Domain verification</li> <li>Example: <code>v=spf1 include:_spf.google.com ~all</code></li> </ul>"},{"location":"computer-network/dns/web-hosting/#real-world-example-website-setup","title":"Real-World Example: Website Setup","text":"<pre><code>flowchart TD\n    A[Buy Domain] --&gt; B[Get Hosting]\n    B --&gt; C[Configure DNS]\n    C --&gt; D[A Record Setup]\n    C --&gt; E[CNAME Setup]\n    C --&gt; F[MX Setup]\n    D --&gt; G[Point to Host IP]\n    E --&gt; H[Setup www]\n    F --&gt; I[Setup Email]</code></pre>"},{"location":"computer-network/dns/web-hosting/#common-configurations","title":"Common Configurations","text":"<ol> <li>Basic Website</li> </ol> <pre><code>example.com       A     192.168.1.10\nwww.example.com   CNAME example.com\n</code></pre> <ol> <li>Email Setup</li> </ol> <pre><code>example.com       MX    mail.example.com (10)\nmail.example.com  A     192.168.1.20\n</code></pre> <ol> <li>Subdomain Setup</li> </ol> <pre><code>blog.example.com  A     192.168.1.30\nshop.example.com  A     192.168.1.40\n</code></pre>"},{"location":"computer-network/dns/web-hosting/#best-practices","title":"Best Practices","text":"<ul> <li>Use A records for apex domain</li> <li>Use CNAME for subdomains</li> <li>Set appropriate TTL</li> <li>Regular DNS audits</li> <li>Backup DNS records</li> </ul>"},{"location":"computer-network/dns/web-hosting/#types-of-hosting","title":"Types of Hosting","text":"<pre><code>flowchart TD\n    subgraph \"Shared Hosting\"\n        SH[Server]\n        SH --&gt; W1[Website 1]\n        SH --&gt; W2[Website 2]\n        SH --&gt; W3[Website 3]\n    end\n\n    subgraph \"VPS Hosting\"\n        VPS[Physical Server]\n        VPS --&gt; V1[Virtual Server 1]\n        VPS --&gt; V2[Virtual Server 2]\n        V1 --&gt; VW1[Website 1]\n        V2 --&gt; VW2[Website 2]\n    end\n\n    subgraph \"Dedicated Hosting\"\n        DH[Physical Server]\n        DH --&gt; DW1[Single Website]\n    end\n\n    subgraph \"Cloud Hosting\"\n        CH[Cloud Infrastructure]\n        CH --&gt; S1[Server 1]\n        CH --&gt; S2[Server 2]\n        CH --&gt; S3[Server 3]\n        S1 --&gt; CW1[Website]\n        S2 --&gt; CW1\n        S3 --&gt; CW1\n    end</code></pre>"},{"location":"mkdocs/information/mkdocs-info/","title":"MkDocs Setup Information","text":""},{"location":"mkdocs/information/mkdocs-info/#introduction","title":"Introduction","text":"<p>MkDocs is a static site generator that's geared towards project documentation. It is written in Python and is easy to configure and deploy.</p>"},{"location":"mkdocs/information/mkdocs-info/#installation","title":"Installation","text":"<p>To install MkDocs, use the following command:</p> <pre><code>pip install mkdocs\n</code></pre>"},{"location":"mkdocs/information/mkdocs-info/#creating-a-new-project","title":"Creating a New Project","text":"<p>To create a new MkDocs project, run:</p> <pre><code>mkdocs new my-project\ncd my-project\n</code></pre>"},{"location":"mkdocs/information/mkdocs-info/#running-the-project","title":"Running the Project","text":"<p>To start the live-reloading docs server, use:</p> <pre><code>mkdocs serve\n</code></pre> <p>You can then view the documentation at <code>http://127.0.0.1:8000/</code>.</p>"},{"location":"mkdocs/information/mkdocs-info/#building-the-documentation","title":"Building the Documentation","text":"<p>To build the documentation, run:</p> <pre><code>mkdocs build\n</code></pre> <p>This will create a <code>site</code> directory with your static site.</p>"},{"location":"mkdocs/information/mkdocs-info/#configuration","title":"Configuration","text":"<p>The configuration file <code>mkdocs.yml</code> is where you configure your MkDocs project. Here is an example configuration:</p> <pre><code># filepath: myDocs/my-project/mkdocs.yml\nsite_name: My Documentation Project\ntheme:\n  name: material\n  custom_dir: docs/overrides\n\n# above theme is added for customization of your docs (optional)\n\nnav:\n  - Home: index.md\n  - React:\n      - Snippets: react/snippets/example-snippet.md\n      - Information: react/information/example-info.md\n  - Bootstrap:\n      - Snippets: bootstrap/snippets/example-snippet.md\n      - Information: bootstrap/information/example-info.md\n  - Tailwind:\n      - Snippets: tailwind/snippets/example-snippet.md\n      - Information: tailwind/information/example-info.md\n  - Virtual Environment:\n      - Snippets: virtual-environment/snippets/create-virtual-env.md\n      - Information: virtual-environment/information/virtual-env-info.md\n  - MkDocs:\n      - Snippets: mkdocs/snippets/example-snippet.md\n      - Information: mkdocs/information/example-info.md\n\nplugins:\n  - search\n  - copy-button\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/yourusername/yourrepo\n</code></pre>"},{"location":"mkdocs/information/mkdocs-info/#deployment","title":"Deployment","text":"<p>You can deploy your MkDocs site to GitHub Pages using:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>For more detailed information, refer to the MkDocs documentation.</p>"},{"location":"mkdocs/snippets/mkdocs-snippet/","title":"MkDocs Setup Snippets","text":""},{"location":"mkdocs/snippets/mkdocs-snippet/#create-folder-structure","title":"Create Folder Structure","text":"<p>Create the following folder structure: (This is the sample structure where <code>docs</code> serve as the main directory and you have to include all the folders inside it. Add <code>mkdocs.yml</code> outside and <code>README.md</code>)</p> <pre><code>documentation-project\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 mkdocs\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 react\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 bootstrap\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 tailwind\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 example-snippet.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 example-info.md\n\u2502   \u251c\u2500\u2500 virtual-environment\n\u2502   \u2502   \u251c\u2500\u2500 snippets\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 create-virtual-env.md\n\u2502   \u2502   \u2514\u2500\u2500 information\n\u2502   \u2502       \u2514\u2500\u2500 virtual-env-info.md\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"react/information/example-info/","title":"Example Information about React","text":"<p>React is a JavaScript library for building user interfaces, primarily for single-page applications. It allows developers to create reusable UI components, manage the state of applications, and efficiently update the user interface when data changes.</p>"},{"location":"react/information/example-info/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Components: The building blocks of a React application. Components can be functional or class-based and can manage their own state.</p> </li> <li> <p>JSX: A syntax extension that allows writing HTML-like code within JavaScript. JSX makes it easier to create and visualize the structure of the UI.</p> </li> <li> <p>State and Props: State is a built-in object that allows components to create and manage their own data. Props (short for properties) are used to pass data from one component to another.</p> </li> <li> <p>Lifecycle Methods: Special methods that allow you to run code at specific points in a component's life, such as when it mounts, updates, or unmounts.</p> </li> <li> <p>Hooks: Functions that let you use state and other React features in functional components. Common hooks include <code>useState</code>, <code>useEffect</code>, and <code>useContext</code>.</p> </li> </ul>"},{"location":"react/information/example-info/#getting-started","title":"Getting Started","text":"<p>To create a new React application, you can use Create React App, a command-line tool that sets up a new React project with a sensible default configuration.</p> <pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre> <p>This will create a new directory called <code>my-app</code> with all the necessary files and dependencies to start building your React application.</p>"},{"location":"react/snippets/example-snippet/","title":"React Example Snippet","text":"<pre><code>// Example of a functional component in React\nimport React from 'react';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Hello, World!&lt;/h1&gt;\n            &lt;p&gt;This is an example snippet for a React functional component.&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ExampleComponent;\n</code></pre>"},{"location":"software-engineering/basics/agile-model/","title":"Agile Model &amp; Its Frameworks","text":""},{"location":"software-engineering/basics/agile-model/#what-is-agile","title":"What is Agile?","text":"<p>The Agile Model is an iterative and incremental software development approach that emphasizes:</p> <ul> <li>Customer collaboration over contract negotiation</li> <li>Working software over documentation</li> <li>Responding to change over following a strict plan</li> <li>Continuous delivery &amp; improvement</li> </ul> <p>Unlike the Waterfall model, which follows a strict sequence, Agile is flexible, adaptive, and fast-paced.</p>"},{"location":"software-engineering/basics/agile-model/#phases-of-agile-development","title":"Phases of Agile Development","text":"<p>Agile follows an iterative approach, meaning the software is developed in small increments (sprints or iterations).</p>"},{"location":"software-engineering/basics/agile-model/#1-concept-initiation","title":"1. Concept &amp; Initiation:","text":"<ul> <li>Define project vision and high-level goals.</li> <li>Identify key stakeholders and set expectations.</li> </ul>"},{"location":"software-engineering/basics/agile-model/#2-planning","title":"2. Planning","text":"<ul> <li>Break down requirements into user stories and prioritize them.</li> <li>Plan sprints (typically 1-4 weeks).</li> </ul>"},{"location":"software-engineering/basics/agile-model/#3-design-development","title":"3. Design &amp; Development","text":"<ul> <li>Develop small working features in each sprint.</li> <li>Continuous integration and testing are done simultaneously.</li> </ul>"},{"location":"software-engineering/basics/agile-model/#4-testing-review","title":"4. Testing &amp; Review","text":"<ul> <li>Frequent testing ensures quality.</li> <li>Stakeholders review and provide feedback after each sprint.</li> </ul>"},{"location":"software-engineering/basics/agile-model/#5-release-deployment","title":"5. Release &amp; Deployment","text":"<ul> <li>Each sprint delivers a working software increment to the users.</li> <li>Deployment is done continuously (CI/CD pipeline).</li> </ul>"},{"location":"software-engineering/basics/agile-model/#6-maintenance-continuous-improvement","title":"6. Maintenance &amp; Continuous Improvement","text":"<ul> <li>Gather feedback and improve the next sprint.</li> <li>Monitor performance and apply patches.</li> </ul>"},{"location":"software-engineering/basics/agile-model/#agile-lifecycle","title":"Agile Lifecycle","text":"<pre><code>flowchart TD\nA[Plan] --&gt; B[Design]\nB --&gt; C[Develop]\nC --&gt; D[Test]\nD --&gt; E[Release]\nE --&gt; F[Feedback]\nF --&gt;|Next Sprint| A</code></pre>"},{"location":"software-engineering/basics/agile-model/#agile-frameworks-methodologies","title":"Agile Frameworks &amp; Methodologies","text":"<p>Agile isn\u2019t a single process but has multiple frameworks that implement Agile principles differently. Here are the most popular ones:</p>"},{"location":"software-engineering/basics/agile-model/#1-scrum-most-popular","title":"1. Scrum (Most Popular)","text":"<p>\ud83d\udd39 Best for: Teams working on complex projects with evolving requirements.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Work is divided into Sprints (1-4 weeks).</li> <li>The team follows Daily Stand-up Meetings (15 min).</li> <li>Defined roles: Scrum Master, Product Owner, Development Team.</li> <li>Sprint Review &amp; Retrospective after each sprint.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>Mobile app development (WhatsApp, Instagram).</li> <li>Game development (incremental feature releases).</li> </ul>"},{"location":"software-engineering/basics/agile-model/#scrum-flowchart","title":"Scrum Flowchart","text":"<pre><code>flowchart LR\n    A[Product Backlog] --&gt; B[Sprint Planning]\n    B --&gt; C[Sprint Backlog]\n    C --&gt; D[Daily Scrum]\n    D --&gt; E[Sprint Review]\n    E --&gt; F[Sprint Retrospective]\n    F --&gt;|Next Sprint| B</code></pre>"},{"location":"software-engineering/basics/agile-model/#2-kanban-visual-workflow-management","title":"2. Kanban (Visual Workflow Management)","text":"<p>\ud83d\udd39 Best for: Continuous delivery projects that require real-time tracking.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Uses a Kanban Board to track work progress.</li> <li>Work items move from To Do \u2192 In Progress \u2192 Done.</li> <li>Focus on reducing bottlenecks and improving workflow efficiency.</li> <li>No fixed iterations like Scrum; work is continuously delivered.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>Customer support systems (Zendesk, ServiceNow).</li> <li>Content publishing workflows (Blogs, YouTube video releases).</li> </ul>"},{"location":"software-engineering/basics/agile-model/#kanban-flowchart","title":"Kanban Flowchart","text":"<pre><code>flowchart LR\n    A[To Do] --&gt; B[In Progress]\n    B --&gt; C[Testing]\n    C --&gt; D[Done]</code></pre>"},{"location":"software-engineering/basics/agile-model/#3-extreme-programming-xp-code-focused","title":"3. Extreme Programming (XP) (Code-Focused)","text":"<p>\ud83d\udd39 Best for: High-risk projects that require fast-paced coding &amp; testing.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Test-Driven Development (TDD) \u2013 Write tests before coding.</li> <li>Pair Programming \u2013 Two developers work on the same code together.</li> <li>Continuous Integration (CI) \u2013 Code is frequently merged and tested.</li> <li>Customer involvement in every sprint.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>FinTech applications (real-time transactions, fraud detection).</li> <li>AI and machine learning projects (frequent model tuning).</li> </ul>"},{"location":"software-engineering/basics/agile-model/#xp-flowchart","title":"XP Flowchart","text":"<pre><code>flowchart TD\n    A[User Stories] --&gt; B[Planning]\n    B --&gt; C[Pair Programming]\n    C --&gt; D[Unit Testing]\n    D --&gt; E[Continuous Integration]\n    E --&gt; F[Small Release]\n    F --&gt;|Next Iteration| A\n\n    style C fill:#f9f,stroke:#333\n    style D fill:#f9f,stroke:#333</code></pre>"},{"location":"software-engineering/basics/agile-model/#4-lean-software-development-speed-efficiency","title":"4. Lean Software Development (Speed &amp; Efficiency)","text":"<p>\ud83d\udd39 Best for: Companies that focus on eliminating waste and maximizing value.</p> <p>\ud83d\udd39 Key Features:</p> <ul> <li>Minimize unnecessary work (avoid extra documentation).</li> <li>Automate repetitive tasks.</li> <li>Deliver software as quickly as possible.</li> <li>Encourage team empowerment &amp; decision-making.</li> </ul> <p>\ud83d\udd39 Example Use Cases:</p> <ul> <li>E-commerce platforms (Amazon, Flipkart).</li> <li>Startups building MVPs (Minimum Viable Products).</li> </ul>"},{"location":"software-engineering/basics/agile-model/#comparison-of-agile-frameworks","title":"Comparison of Agile Frameworks","text":"Framework Best For Key Features Examples Scrum Complex projects with evolving needs Sprints, Stand-ups, Scrum Master App &amp; game development Kanban Continuous workflow tracking Kanban Board, real-time updates Support teams, publishing workflows XP (Extreme Programming) Code-intensive projects TDD, Pair Programming, CI/CD FinTech, AI development Lean Fast-paced delivery, efficiency Eliminate waste, optimize flow E-commerce, Startups"},{"location":"software-engineering/basics/agile-model/#advantages","title":"Advantages","text":"<ul> <li>Faster development cycles \u2192 Early &amp; continuous delivery.</li> <li>Customer-focused \u2192 Frequent feedback improves quality.</li> <li>Better risk management \u2192 Issues identified early.</li> <li>Higher team collaboration \u2192 Teams work closely with stakeholders.</li> </ul>"},{"location":"software-engineering/basics/agile-model/#disadvantages","title":"Disadvantages","text":"<ul> <li>Not suitable for all projects \u2192 Works poorly in highly regulated environments (e.g., medical devices).</li> <li>Requires experienced teams \u2192 Needs self-discipline &amp; adaptability.</li> <li>Less predictability \u2192 No fixed deadlines like Waterfall.</li> </ul>"},{"location":"software-engineering/basics/sdlc-models-summary/","title":"Comparison between Various SDLC Models","text":"<p>Below is a high-level comparison of several Software Development Life Cycle (SDLC) models.</p> Aspect Waterfall Iterative Spiral Agile V-Models Incremental Development Approach Sequential Iterative Iterative Iterative Iterative Iterative Phases Linear Planning, Design, Coding, Testing, Evaluation (Repeated Iteratively) Planning, Risk Analysis, Engineering, Testing (Cyclical) Planning, Sprint, Review, Retrospective (Iterative Cycles) Planning, Design, Implementation, Testing, Deployment (Parallel) Divided into increments, each with Planning, Implementation, Testing Flexibility Low High High High Moderate High Risk Management Late Proactive Continuous Continuous Moderate Proactive Time-to-Market Longer Faster Variable Faster Moderate Faster User Involvement Limited Continuous Periodic Continuous Periodic Continuous Testing After Implementation Continuous Integrated Continuous After Implementation Continuous Adaptability Low High High High Moderate High Complexity Management Linear Adaptive Cyclical Adaptive Traceability Adaptive"},{"location":"software-engineering/basics/sdlc-models-summary/#when-to-use-which-sdlc-models","title":"When to Use Which SDLC Models?","text":"Consideration Waterfall Iterative Spiral Agile V-Models Incremental Project Size Small-Medium Medium-Large Large Small-Medium Medium-Large Small-Large Project Complexity Low-Medium Medium-High High Low-High Medium-High Medium-High Requirements Stability Stable Evolving Evolving Changing Moderate Stable-Moderate Client Involvement Limited Continuous Periodic High Periodic Continuous Budget Constraints Fixed Some Flexibility Flexible Variable Fixed Some Flexibility Risk Tolerance Low Moderate High Moderate Moderate Moderate-High Time-to-Market Moderate Faster Variable Faster Moderate Faster Documentation Emphasis Extensive Moderate Detailed Minimal Moderate Moderate Testing Approach Sequential Continuous Continuous Continuous After Phases Continuous Change Management Limited High Adaptive Highly Adaptive Moderate High"},{"location":"software-engineering/basics/sdlc-models-summary/#most-widely-used-sdlc-model","title":"Most Widely Used SDLC Model","text":"<p>Agile is the most widely used SDLC model due to its adaptability, customer satisfaction, faster time-to-market, effective risk management, collaborative environment, continuous improvement, iterative development, and sustainable pace.</p>"},{"location":"software-engineering/basics/sdlc-models/","title":"SDLC Models","text":"<p>An SDLC model is a systematic approach to the software development process that defines the stages and tasks involved in building software. It serves as a guide for planning, structuring, and controlling the process of developing information systems.</p>"},{"location":"software-engineering/basics/sdlc-models/#i-waterfall-model","title":"(i) Waterfall Model","text":"<ul> <li>The Waterfall model follows a linear and sequential approach to software development. Each phase in the development process must be completed before moving on to the next one, resembling the downward flow of a waterfall.</li> </ul> <pre><code>flowchart TD\n    A[Requirements] --&gt; B[Design]\n    B --&gt; C[Implementation/Development]\n    C --&gt; D[Verification/Testing]\n    D --&gt; E[Deployment]\n    E --&gt; F[Maintenance]</code></pre> <p>Advantages</p> <ul> <li>Easy to understand and manage</li> <li>Suitable for small projects with well-defined requirements at the beginning</li> </ul> <p>Disadvantages</p> <ul> <li>Inflexible to changes</li> <li>Testing happens late</li> <li>Limited client feedback</li> <li>No early prototypes</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#ii-iterative-model","title":"(ii) Iterative Model","text":"<p>The Iterative model develops a system through repeated cycles (iterations) and in smaller portions at a time.</p> <pre><code>flowchart TD\n    A[Initial Planning/Initialization] --&gt; B[Planning]\n    B --&gt; C[Requirements]\n    C --&gt; D[Analysis &amp; Design]\n    D --&gt; E[Implementation]\n    E --&gt; F[Testing]\n    F --&gt; G[Evaluation]\n    G --&gt;|Next Iteration| B</code></pre> <p>Advantages</p> <ul> <li>Early working version</li> <li>Flexible to changes</li> <li>Risks identified early</li> <li>Regular customer feedback</li> <li>Better risk management</li> </ul> <p>Disadvantages</p> <ul> <li>More management complexity</li> <li>Needs active customer involvement</li> <li>May extend project timeline</li> <li>Documentation challenges</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#iii-v-model-verification-and-validation-model","title":"(iii) V-Model (Verification and Validation Model)","text":"<p>The V-Model extends the waterfall model by emphasizing testing for each corresponding development stage. Each development stage has a directly associated testing phase.</p> <ul> <li>By integrating verification and validation activities in parallel, this model aims to deliver high-quality software while mitigating the risk of defects.</li> </ul> <pre><code>graph TD\n    A[Requirements] --&gt; F[Acceptance Testing]\n    B[System Design] --&gt; G[System Testing]\n    C[Architecture Design] --&gt; H[Integration Testing]\n    D[Module Design] --&gt; I[Module Testing]\n    E[Coding]\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n    I --&gt; E\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style F fill:#f9f,stroke:#333,stroke-width:2px\n    style E fill:#444,stroke:#444,stroke-width:2px</code></pre> <p>Advantages</p> <ul> <li>Systematic testing</li> <li>Clear deliverables</li> <li>Easy to manage</li> <li>Strong documentation</li> </ul> <p>Disadvantages</p> <ul> <li>Rigid structure</li> <li>No early prototypes</li> <li>High cost of testing</li> <li>Long development cycle</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#iv-evolutionary-models","title":"(iv) Evolutionary Models","text":"<ul> <li>Evolutionary Models are iterative.</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#1-prototyping-model","title":"1. Prototyping Model","text":"<p>A software development model where a prototype is built, tested, and refined until it meets client requirements.</p> <pre><code>flowchart TD\n    A[Initial Requirements] --&gt; B[Build Prototype]\n    B --&gt; C[Review]\n    C --&gt; D[Refine Requirements]\n    D --&gt;|Not Satisfied| B\n    D --&gt;|Satisfied| E[Development]\n    E --&gt; F[Testing]\n    F --&gt; G[Maintenance]</code></pre> <p>Best Used For</p> <ul> <li>User interface designs</li> <li>Online systems</li> <li>Web applications</li> <li>Mobile apps</li> </ul> <p>Advantages</p> <ul> <li>Early user feedback</li> <li>Clear requirements</li> <li>Reduced risk</li> <li>Better user satisfaction</li> </ul> <p>Disadvantages</p> <ul> <li>Time-consuming</li> <li>Increased cost</li> <li>Client confusion</li> <li>Incomplete documentation</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#2-spiral-model","title":"2. Spiral Model","text":"<p>The Spiral Model combines aspects of both waterfall and prototyping models, emphasizing risk analysis throughout each iteration.</p> <pre><code>flowchart LR\n    subgraph \"Iteration 1\"\n        A1[Planning] --&gt; B1[Risk Analysis]\n        B1 --&gt; C1[Engineering]\n        C1 --&gt; D1[Evaluation]\n        D1 --&gt; A2\n    end\n\n    subgraph \"Iteration 2\"\n        A2[Planning] --&gt; B2[Risk Analysis]\n        B2 --&gt; C2[Engineering]\n        C2 --&gt; D2[Evaluation]\n        D2 --&gt; A3\n    end\n\n    subgraph \"Iteration 3\"\n        A3[Planning] --&gt; B3[Risk Analysis]\n        B3 --&gt; C3[Engineering]\n        C3 --&gt; D3[Evaluation]\n    end</code></pre> <pre><code>graph TD\n    A[Planning] --&gt; B[Risk Analysis]\n    B --&gt; C[Engineering]\n    C --&gt; D[Evaluation]\n    D --&gt; A</code></pre> <ul> <li>continuous iteration of the above step....</li> </ul> <p>Four Phases per Spiral</p> <ul> <li> <p>Planning :   Objectives,   Alternatives,   Constraints,   Risk Analysis</p> </li> <li> <p>Identify risks:   Risk mitigation,   Prototyping,   Engineering</p> </li> <li> <p>Development:   Testing,   Verification,</p> </li> <li>Evaluation:   Review results,   Plan next iteration,   Decision to continue</li> </ul> <p>Best Used For:</p> <ul> <li>Large, high-risk projects</li> <li>Projects needing early user feedback</li> <li>Complex systems with unclear requirements Example: New Operating System Development</li> </ul> <p>Advantages</p> <ul> <li>High risk management</li> <li>Early prototypes</li> <li>Flexible to changes</li> <li>Regular customer feedback</li> </ul> <p>Disadvantages</p> <ul> <li>Complex management</li> <li>High documentation</li> <li>Expensive for small projects</li> <li>Needs risk assessment expertise</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#v-incremental-model","title":"(v) Incremental Model","text":"<p>Develops software in increments, with each increment adding new functionality to the previous version.</p>"},{"location":"software-engineering/basics/sdlc-models/#development-cycle","title":"Development Cycle","text":"<pre><code>flowchart TD\n        A[Requirements] --&gt;|Build 1| B1[Design]\n    subgraph \"Increment 1\"\n\n        B1 --&gt; C1[Code]\n        C1 --&gt; D1[Test]\n        D1 --&gt; E1[Release v1]\n    end\n\n    subgraph \"Increment 2\"\n        B2[Design] --&gt; C2[Code]\n        C2 --&gt; D2[Test]\n        D2 --&gt; E2[Release v2]\n    end\n\n    A --&gt;|Build 2| B2</code></pre> <p>Key Features</p> <ul> <li>Multiple Development Cycles</li> <li>Partial Systems</li> <li>Prioritized Development</li> <li>Parallel Development</li> </ul> <p>Advantages</p> <ul> <li>Early functional software</li> <li>Flexible scheduling</li> <li>Easy to test</li> <li>Risk management</li> </ul> <p>Disadvantages</p> <ul> <li>Interface challenges</li> <li>Need good planning</li> <li>System architecture issues</li> <li>Documentation overhead</li> </ul>"},{"location":"software-engineering/basics/sdlc-models/#vi-agile-model","title":"(vi) Agile Model","text":"<p>Agile is an iterative approach that focuses on collaboration, customer feedback, and rapid releases.</p>"},{"location":"software-engineering/basics/sdlc-models/#sprint-cycle","title":"Sprint Cycle","text":"<pre><code>flowchart TD\n    A[Sprint Planning] --&gt; B[Daily Standups]\n    B --&gt; C[Development]\n    C --&gt; D[Testing]\n    D --&gt; E[Sprint Review]\n    E --&gt; F[Sprint Retrospective]\n    F --&gt;|Next Sprint| A\n\n    style A fill:#f9f,stroke:#333\n    style E fill:#f9f,stroke:#333\n    style F fill:#f9f,stroke:#333</code></pre>"},{"location":"software-engineering/basics/sdlc/","title":"Software Development Life Cycle (SDLC)","text":""},{"location":"software-engineering/basics/sdlc/#what-is-sdlc","title":"What is SDLC?","text":"<p>The Software Development Life Cycle (SDLC) is a systematic process for building software applications that ensures their quality and correctness. The SDLC process aims to produce high-quality software that meets customer expectations and completes development within time and cost estimates.</p> <pre><code>graph TD\n    A[Planning] --&gt;|Requirements Gathered| B[Analysis]\n    B --&gt;|Requirements Defined| C[Design]\n    C --&gt;|Architecture Created| D[Implementation]\n    D --&gt;|Code Developed| E[Testing]\n    E --&gt;|Software Verified| F[Deployment]\n    F --&gt;|Live Release| G[Maintenance]\n    G --&gt;|Updates Required| A</code></pre>"},{"location":"software-engineering/basics/sdlc/#key-objectives","title":"Key Objectives","text":"<ul> <li>Deliver high-quality software</li> <li>Meet customer expectations</li> <li>Complete within timeline and budget</li> <li>Follow best practices and standards</li> </ul>"},{"location":"software-engineering/basics/sdlc/#sdlc-stages","title":"SDLC Stages","text":""},{"location":"software-engineering/basics/sdlc/#1-planning-and-requirement-analysis","title":"1. Planning and Requirement Analysis","text":"<pre><code>flowchart TD\n    A[Gather Requirements] --&gt; B[Analyze Requirements]\n    B --&gt; C[Document Requirements]\n    C --&gt; D[Validate Requirements]\n    D --&gt; E[Create Project Plan]</code></pre>"},{"location":"software-engineering/basics/sdlc/#2-defining-requirements","title":"2. Defining Requirements","text":"<pre><code>flowchart LR\n    A[Business Requirements] --&gt; B[Technical Requirements]\n    B --&gt; C[Functional Requirements]\n    C --&gt; D[Non-Functional Requirements]\n    D --&gt; E[SRS Document]</code></pre> <ul> <li>This is fulfilled by utilizing SRS (Software Requirement Specification). This is a sort of document that specifies all those things that need to be defined and created during the entire project cycle.</li> </ul>"},{"location":"software-engineering/basics/sdlc/#3-system-design","title":"3. System Design","text":""},{"location":"software-engineering/basics/sdlc/#two-approaches-to-system-design","title":"Two approaches to System Design:","text":"<ol> <li> <p>Top-Down Approach (High Level \u2192 Low Level)</p> </li> <li> <p>Start with overall system architecture</p> </li> <li>Break down into smaller components</li> <li> <p>Good for understanding big picture first</p> </li> <li> <p>Bottom-Up Approach (Low Level \u2192 High Level)</p> </li> <li>Start with detailed components</li> <li>Combine into larger systems</li> <li>Good for understanding implementation details first</li> </ol>"},{"location":"software-engineering/basics/sdlc/#design-hierarchy","title":"Design Hierarchy:","text":"<pre><code>graph TD\n   A[Requirements Analysis] --&gt; B[Low Level Design]\n        B --&gt; C[High Level Design]\n        C --&gt; D[System Architecture]</code></pre> <pre><code>graph TD\n    subgraph \"System Design\"\n\n        subgraph \"Low Level Design\"\n            B1[Class Design]\n            B2[Algorithm Details]\n            B3[Data Structures]\n        end\n\n        subgraph \"High Level Design\"\n            C1[Component Design]\n            C2[Interface Design]\n            C3[Database Design]\n        end\n\n        subgraph \"System Architecture\"\n            D1[Overall Structure]\n            D2[System Integration]\n            D3[Deployment Plan]\n        end\n    end</code></pre> <ul> <li>SRS is a reference for software designers to come up with the best architecture for the software. Hence, with the requirements defined in SRS, multiple designs for the product architecture are present in the Design Document Specification (DDS).</li> </ul>"},{"location":"software-engineering/basics/sdlc/#4-implementation","title":"4. Implementation","text":"<ul> <li>At this stage, the fundamental development of the product starts. For this, developers use a specific programming code as per the design in the DDS.</li> <li>Programming tools like compilers, interpreters, debuggers, etc. and languages like C/C++, Python, Java etc. are also put into use at this stage.</li> </ul> <pre><code>flowchart LR\n    A[Code Development] --&gt; B[Code Review]\n    B --&gt; C[Unit Testing]\n    C --&gt; D[Integration]</code></pre>"},{"location":"software-engineering/basics/sdlc/#5-testing-and-integration","title":"5. Testing and Integration","text":"<pre><code>flowchart TD\n    A[Unit Testing] --&gt; B[Integration Testing]\n    B --&gt; C[System Testing]\n    C --&gt; D[Acceptance Testing]\n    D --&gt; E[Performance Testing]</code></pre>"},{"location":"software-engineering/basics/sdlc/#6-deployment","title":"6. Deployment","text":"<pre><code>flowchart LR\n    A[Build Release] --&gt; B[Deploy to Staging]\n    B --&gt; C[User Acceptance]\n    C --&gt; D[Production Deployment]</code></pre>"},{"location":"software-engineering/basics/sdlc/#7-maintenance","title":"7. Maintenance","text":"<pre><code>flowchart TD\n    A[Monitor System] --&gt; B[Bug Fixes]\n    B --&gt; C[Updates]\n    C --&gt; D[Enhancements]\n    D --&gt; A</code></pre> <p>Reference: Click here</p>"},{"location":"software-engineering/basics/software-software_engineering/","title":"Software and Software Engineering","text":""},{"location":"software-engineering/basics/software-software_engineering/#software","title":"Software","text":"<p>Software is a set of programs and data that instructs a computer to perform tasks. It enables hardware to function and allows user interaction.</p>"},{"location":"software-engineering/basics/software-software_engineering/#types-of-software","title":"Types of Software","text":"<ul> <li>System Software: Manages hardware and provides a platform for other software (e.g., operating systems like Windows, macOS, Linux).</li> <li>Application Software: Designed for end-users to perform specific tasks (e.g., web browsers, media players, office suites).</li> <li>Programming Software: Provides tools for developers to write, test, and debug code (e.g., compilers, text editors, IDEs).</li> <li>Middleware: Acts as a bridge between different applications and system software.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#software-engineering","title":"Software Engineering","text":"<p>Software Engineering involves designing, developing, testing, and maintaining software systematically to ensure quality and reliability.</p>"},{"location":"software-engineering/basics/software-software_engineering/#key-principles","title":"Key Principles","text":"<ul> <li>Modularity: Break software into smaller parts.</li> <li>Abstraction: Hide implementation details.</li> <li>Encapsulation: Protect internal state.</li> <li>Reusability: Use components in multiple projects.</li> <li>Maintenance: Regular updates and improvements.</li> <li>Testing: Ensure software meets requirements.</li> <li>Design Patterns: Templates for solving design problems.</li> <li>Agile Methodologies: Iterative development focused on customer satisfaction.</li> <li>Continuous Integration &amp; Deployment: Regularly integrate and deploy code.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#main-attributes","title":"Main Attributes","text":"<ul> <li>Efficiency: Resource usage.</li> <li>Reliability: Consistent performance.</li> <li>Reusability: Use in multiple applications.</li> <li>Maintainability: Easy to modify and enhance.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#dual-role-of-software","title":"Dual Role of Software","text":"<ol> <li>As a Product: Enables hardware functionality and information processing.</li> <li>As a Vehicle for Delivering a Product: Provides system functionality and helps build other software.</li> </ol>"},{"location":"software-engineering/basics/software-software_engineering/#objectives","title":"Objectives","text":"<ul> <li>Maintainability: Adapt to changes.</li> <li>Efficiency: Optimal resource use.</li> <li>Correctness: Meets requirements.</li> <li>Reusability: Easy module reuse.</li> <li>Testability: Facilitate testing.</li> <li>Reliability: Consistent function.</li> <li>Portability: Transferable across systems.</li> <li>Adaptability: Satisfy varying needs.</li> <li>Interoperability: Cooperative data processing.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#program-vs-software-product","title":"Program vs Software Product","text":"Parameters Program Software Product Definition Instructions for a task. Commercially available, documented, licensed. Stages Involved Single stage. Full life cycle: feasibility, requirements, design, coding, testing. <ul> <li> <p>A program is a set of instructions that are given to a computer in order to achieve a specific task.</p> </li> <li> <p>Software is when a program is made available for commercial business and is properly documented along with its licensing.</p> </li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#advantages","title":"Advantages","text":"<ul> <li>Improved Quality: Fewer bugs.</li> <li>Increased Productivity: Streamlined process.</li> <li>Better Maintainability: Easier updates.</li> <li>Reduced Costs: Early problem detection.</li> <li>Increased Customer Satisfaction: Meets needs.</li> <li>Better Team Collaboration: Agile methods.</li> <li>Better Scalability: Designed for growth.</li> <li>Better Security: Prevents breaches.</li> </ul>"},{"location":"software-engineering/basics/software-software_engineering/#disadvantages","title":"Disadvantages","text":"<ul> <li>High Upfront Costs: Investment needed.</li> <li>Limited Flexibility: Slow adaptation.</li> <li>Bureaucratic: Slows development.</li> <li>Complexity: Hard to navigate.</li> <li>Limited Creativity: Structured approach.</li> <li>High Learning Curve: Extensive training.</li> <li>Tool Dependence: Issues with tools.</li> <li>High Maintenance: Costly upkeep.</li> </ul> <p>In summary, software engineering provides a structured approach to develop high-quality, maintainable software, improving customer satisfaction and reducing costs.</p> <p>Reference : Click here</p>"},{"location":"virtual-environment/information/virtual-env-info/","title":"Virtual Environments","text":"<p>Virtual environments are isolated environments that allow you to manage dependencies for different projects separately. They are particularly useful in Python development, where different projects may require different versions of libraries.</p>"},{"location":"virtual-environment/information/virtual-env-info/#purpose-of-virtual-environments","title":"Purpose of Virtual Environments","text":"<ol> <li>Dependency Management: Virtual environments help manage project-specific dependencies without affecting the global Python installation.</li> <li>Version Control: You can maintain different versions of libraries for different projects, ensuring compatibility and stability.</li> <li>Isolation: Each virtual environment is self-contained, preventing conflicts between packages used in different projects.</li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#common-tools-for-creating-virtual-environments","title":"Common Tools for Creating Virtual Environments","text":"<ul> <li>venv: A built-in module in Python 3 that allows you to create lightweight virtual environments.</li> <li>virtualenv: A third-party tool that provides more features and supports older versions of Python.</li> <li>conda: A package manager that can create virtual environments and manage packages for Python and other languages.</li> </ul>"},{"location":"virtual-environment/information/virtual-env-info/#basic-commands","title":"Basic Commands","text":""},{"location":"virtual-environment/information/virtual-env-info/#using-venv","title":"Using <code>venv</code>","text":"<ol> <li> <p>Create a Virtual Environment:    <pre><code>python -m venv myenv\n</code></pre></p> </li> <li> <p>Activate the Virtual Environment:</p> </li> <li>On Windows:      <pre><code>myenv\\Scripts\\activate\n</code></pre></li> <li> <p>On macOS/Linux:      <pre><code>source myenv/bin/activate\n</code></pre></p> </li> <li> <p>Deactivate the Virtual Environment:    <pre><code>deactivate\n</code></pre></p> </li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#using-virtualenv","title":"Using <code>virtualenv</code>","text":"<ol> <li> <p>Install virtualenv (if not already installed):    <pre><code>pip install virtualenv\n</code></pre></p> </li> <li> <p>Create a Virtual Environment:    <pre><code>virtualenv myenv\n</code></pre></p> </li> <li> <p>Activate and Deactivate: Same as above.</p> </li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#using-conda","title":"Using <code>conda</code>","text":"<ol> <li> <p>Create a Virtual Environment:    <pre><code>conda create --name myenv\n</code></pre></p> </li> <li> <p>Activate the Virtual Environment:    <pre><code>conda activate myenv\n</code></pre></p> </li> <li> <p>Deactivate the Virtual Environment:    <pre><code>conda deactivate\n</code></pre></p> </li> </ol>"},{"location":"virtual-environment/information/virtual-env-info/#conclusion","title":"Conclusion","text":"<p>Using virtual environments is a best practice in software development, especially for Python projects. They help maintain clean and manageable project dependencies, making it easier to work on multiple projects simultaneously.</p>"},{"location":"virtual-environment/snippets/create-virtual-env/","title":"Creating a Virtual Environment","text":""},{"location":"virtual-environment/snippets/create-virtual-env/#python","title":"Python","text":"<p>To create a virtual environment in Python, follow these steps:</p> <ol> <li> <p>Install <code>virtualenv</code> (if not already installed): <code>pip install virtualenv</code></p> </li> <li> <p>Navigate to your project directory: <code>cd your-project-directory</code></p> </li> <li> <p>Create a virtual environment: <code>virtualenv venv</code></p> </li> <li> <p>Activate the virtual environment:</p> </li> <li> <p>On Windows:      <pre><code>venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>On macOS/Linux:      <pre><code>source venv/bin/activate\n</code></pre></p> </li> <li> <p>Deactivate the virtual environment when done:    <pre><code>deactivate\n</code></pre></p> </li> </ol>"},{"location":"virtual-environment/snippets/create-virtual-env/#nodejs","title":"Node.js","text":"<p>To create a virtual environment in Node.js, you can use <code>nvm</code> (Node Version Manager):</p> <ol> <li> <p>Install <code>nvm</code> (if not already installed):    Follow the installation instructions from the nvm repository.</p> </li> <li> <p>Install a specific Node.js version: <code>nvm install &lt;version&gt;</code></p> </li> <li> <p>Use the installed version: <code>nvm use &lt;version&gt;</code></p> </li> <li> <p>Deactivate the version: <code>nvm deactivate</code></p> </li> </ol>"}]}